* Inspecting 3D image data with pyclesperanto
  :PROPERTIES:
  :CUSTOM_ID: inspecting-3d-image-data-with-pyclesperanto
  :END:
This notebook demonstrates how to navigate through 3D images.

#+begin_src python
import pyclesperanto_prototype as cle

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from skimage.io import imread
#+end_src

#+begin_src python
# Laod example data
input_image = imread('../../data/Haase_MRT_tfl3d1.tif')
#+end_src

** Copy Slice
   :PROPERTIES:
   :CUSTOM_ID: copy-slice
   :END:
In order to visualize crop specific slices; without the image leaving
GPU memory, use the =copy_slice= method.

#+begin_src python
# Copy Slice
image_slice = cle.create([256, 256]);
slice_z_position = 40.0;
cle.copy_slice(input_image, image_slice, slice_z_position)

# show result
cle.imshow(image_slice)
#+end_src

[[file:21ed85d318d43402452fadd1d843524884924e79.png]]

#+begin_src python
# Alternatively, don't hand over the output image and retrieve it
another_slice = cle.create_2d_xy(input_image)
cle.copy_slice(input_image, another_slice, slice_index = 80)

# show result
cle.imshow(another_slice)
#+end_src

[[file:ca5330a8d4a3d450de07b05ddfa95fc6bf4f1f58.png]]

** Projection
   :PROPERTIES:
   :CUSTOM_ID: projection
   :END:
pyclesperanto offers min/mean/max and sum projections in x, y and z.

#+begin_src python
# Maximum Z Projection
projection = cle.maximum_z_projection(input_image)

# show result
cle.imshow(projection)
#+end_src

[[file:a294a427cd5aec1979149f2c9a69f0f9b089beca.png]]

If you pass an image stack to =cle.imshow= it will make the maximum
intensity projection along Z for you:

#+begin_src python
cle.imshow(input_image)
#+end_src

[[file:a294a427cd5aec1979149f2c9a69f0f9b089beca.png]]

#+begin_src python
# Sum Z Projection
projection = cle.sum_z_projection(input_image)

# show result
cle.imshow(projection)
#+end_src

[[file:285bcbcc274c297ace67480b7e5468680d6bdc52.png]]

#+begin_src python
# Mean Y Projection
projection = cle.mean_y_projection(input_image)

# show result
cle.imshow(projection)
#+end_src

[[file:ab9184ec8ea34bae50e322ced4efc07e6294eee2.png]]

** Transpose XZ
   :PROPERTIES:
   :CUSTOM_ID: transpose-xz
   :END:
In order to transpose axes of images in the GPU, use the transpose
methods

#+begin_src python
# Transpose X against Z
transposed_image = cle.create([256, 256, 129]);
cle.transpose_xz(input_image, transposed_image)

# show result
cle.imshow(transposed_image[126])
cle.imshow(transposed_image[98])
#+end_src

[[file:73c396ce184a06584e084b8523d588c0367b9788.png]]

[[file:1abc1e1ff5d7eb3e4a1dd261911ead945d588dd3.png]]

Use subplots to but them side by side

#+begin_src python
fig, axs = plt.subplots(1, 4, figsize=(15, 7))
cle.imshow(transposed_image[75], plot=axs[0])
cle.imshow(transposed_image[100], plot=axs[1])
cle.imshow(transposed_image[125], plot=axs[2])
cle.imshow(transposed_image[150], plot=axs[3])
#+end_src

[[file:51be570d5579409336b05508bc5eb82fd97ea418.png]]

#+begin_src python
#+end_src
