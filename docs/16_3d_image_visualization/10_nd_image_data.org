<<joined-quest>>
(multi-dimensional-image-stacks)=

* Multidimensional image stacks
  :PROPERTIES:
  :CUSTOM_ID: multidimensional-image-stacks
  :END:
Multi-dimensionsal image data data can be handled in a similar way as
[[https://nbviewer.jupyter.org/github/BiAPoL/Bio-image_Analysis_with_Python/blob/main/image_processing/03_multi_channel_image_data.ipynb][multi-channel
image data]].

<<american-wallet>>
** Three-dimensional image stacks
   :PROPERTIES:
   :CUSTOM_ID: three-dimensional-image-stacks
   :END:
There are also images with three spatial dimensions: X, Y, and Z. You
find typical examples in microscopy and in medical imaging. Let's take a
look at an Magnetic Resonance Imaging (MRI) data set:

<<developmental-prison>>
#+begin_src python
from skimage.io import imread
from pyclesperanto_prototype import imshow
image_stack = imread('../../data/Haase_MRT_tfl3d1.tif')
#+end_src

<<554a0c17-2f57-4dc4-813c-fd327482fc4f>>
#+begin_src python
image_stack.shape
#+end_src

#+begin_example
(192, 256, 256)
#+end_example

<<6ec78dd9-cd25-498d-a16c-b3a0f10bf4d9>>
We see that the data has indeed three dimensions, in this case 192
Z-planes and 256 X and Y pixels. We can display it with pyclesperanto's
=imshow=:

<<6bc6ed6e>>
#+begin_src python
imshow(image_stack)
#+end_src

[[file:6fdb275995d40afc9b5ff315ba9ae2cd6074fd00.png]]

<<sitting-rochester>>
This MRI dataset looks unusal, because we are looking at a maximum
intensity projection which is pyclesperanto's default way of visualizing
three-dimensional data.

<<97d29751-01e6-49ba-a2cd-8c6c38bf78f2>>
** Image slicing
   :PROPERTIES:
   :CUSTOM_ID: image-slicing
   :END:
We can inspect individual image slices by specifying their index in our
3D numpy array and this time use Matplotlib's =imshow= for
visualization:

<<unusual-territory>>
#+begin_src python
import matplotlib.pyplot as plt
fig, axs = plt.subplots(1, 3, figsize=(15,15))

# show three planar images
axs[0].imshow(image_stack[48], cmap='Greys_r')
axs[1].imshow(image_stack[96], cmap='Greys_r')
axs[2].imshow(image_stack[144], cmap='Greys_r');
#+end_src

[[file:96d1c5dbfb77d38de61a029789db86ad9f78e79a.png]]

<<initial-switzerland>>
As all three dimensions are spatial dimensions, we can also make slices
orthogonal to the image plane and corresponding to
[[https://en.wikipedia.org/wiki/Anatomical_plane][Anatomical planes]].
To orient the images correctly, we can transpose their axes by adding
=.T= by the end.

<<fossil-height>>
#+begin_src python
saggital = image_stack[:,:,128].T
coronal = image_stack[:,128,:].T
transverse = image_stack[96]

fig, axs = plt.subplots(1, 3, figsize=(15,15))

# show orthogonal planes
axs[0].imshow(saggital, cmap='Greys_r')
axs[0].set_title('Saggital')

axs[1].imshow(coronal, cmap='Greys_r')
axs[1].set_title('Coronal')

axs[2].imshow(transverse, cmap='Greys_r')
axs[2].set_title('Transverse');
#+end_src

[[file:8ca72626a91fddfc041b79f29d322863b94677e2.png]]

<<waiting-suffering>>
** Videos
   :PROPERTIES:
   :CUSTOM_ID: videos
   :END:
If an image dataset has a temporal dimension, we call it a video.
Processing videos works similar to multi-channel images and image
stacks. Let's open a microscopy dataset showing yeast cells rounding
over time. (Image data courtesy of Anne Esslinger, Alberti lab, MPI CBG)

<<improving-seventh>>
#+begin_src python
video = imread('../../data/rounding_assay.tif')

video.shape
#+end_src

#+begin_example
(64, 512, 512)
#+end_example

<<loose-mouse>>
#+begin_src python
fig, axs = plt.subplots(1, 4, figsize=(15,15))

# show three planar images
axs[0].imshow(video[0], cmap='Greys_r')
axs[1].imshow(video[5], cmap='Greys_r')
axs[2].imshow(video[10], cmap='Greys_r')
axs[3].imshow(video[15], cmap='Greys_r');
#+end_src

[[file:4fd9a5d089011c30b36b71476f067a0e2f577218.png]]

<<intimate-milwaukee>>
** n-dimensional data
   :PROPERTIES:
   :CUSTOM_ID: n-dimensional-data
   :END:
High-dimensional data are pretty common in microscopy. To process them
correctly, one must study carefully what dimensions an image dataset
has. We can explore possibilities using the =mitosis= dataset:

<<statewide-incident>>
#+begin_src python
mitosis = imread('../../data/mitosis.tif')

mitosis.shape
#+end_src

#+begin_example
(51, 5, 2, 196, 171)
#+end_example

<<weighted-maintenance>>
Hint: Open the dataset in ImageJ/Fiji to understand what these numbers
stand for. You can see there that the mitosis dataset has

- 51 frames,
- 5 Z-slices,
- 2 channels and
- is 171 x 196 pixels large.

<<important-prime>>
We grab now channels 1 and 2 of the first time point (index 0) in the
center plane (index 2):

<<radical-vessel>>
#+begin_src python
timepoint = 0
plane = 2

channel1 = mitosis[timepoint, plane, 0]
channel2 = mitosis[timepoint, plane, 1]

fig, axs = plt.subplots(1, 2, figsize=(15,15))

axs[0].imshow(channel1, cmap='Greys_r')
axs[1].imshow(channel2, cmap='Greys_r');
#+end_src

[[file:b6e62a0264ea7cb196c3d8a449682c5ac7e75021.png]]

<<moderate-domain>>
** Exercise
   :PROPERTIES:
   :CUSTOM_ID: exercise
   :END:
Open the mitosis dataset, select three timepoints and show them
side-by-side. The resulting figure should have three columns and two
rows. In the first row, channel1 is displayed and the second channel
below.
