(image-segmentation:thresholding)=

* Thresholding
  :PROPERTIES:
  :CUSTOM_ID: thresholding
  :END:
Thresholding is a technique of image segmentation. It separates a given
single-channel image (or stack) into two regions: Pixels with intensity
below a given threshold, also called "background" and pixels with
intensity above a given threshold, "foreground". Typically those
algorithms result in binary images where background intensity is 0 and
foreground intensity is 1. When applying such algorithms in ImageJ,
foreground pixels are 255. In scikit-image, background pixels are
=False= and foreground pixels are =True=.

See also

- [[https://en.wikipedia.org/wiki/Thresholding_(image_processing)][Thresholding
  (wikipedia)]]
- [[https://scikit-image.org/docs/dev/auto_examples/segmentation/plot_thresholding.html][Threshold
  algorithms in scikit-image]]

#+begin_src python
from skimage.io import imread
from pyclesperanto_prototype import imshow
import pyclesperanto_prototype as cle

from skimage import filters
from skimage.filters import try_all_threshold
from matplotlib import pyplot as plt
import napari_simpleitk_image_processing as nsitk
#+end_src

#+begin_src python
image = imread("../../data/blobs.tif")
imshow(image)
#+end_src

[[file:0691d67b662888d48b2a43a629bababf0db05cb3.png]]

** Image segmentation by thresholding
   :PROPERTIES:
   :CUSTOM_ID: image-segmentation-by-thresholding
   :END:
The
[[https://scikit-image.org/docs/dev/api/skimage.filters.html#skimage.filters.threshold_otsu][threshold_otsu]]
operation, also known as Otsu's method (Otsu et al., IEEE Transactions
on Systems, Man, and Cybernetics, Vol. 9 (1), 1979), delivers a number -
the threshold to be applied.

#+begin_src python
threshold = filters.threshold_otsu(image)
#+end_src

When using methods such as thresholding in notebooks, it is recommended
to print out the result to see what it actually returns. Here, we are
using the method from scikit-image, which returns the threshold that is
applied. Printing that threshold can be helpful later when reproducing
the workflow, also if others want to apply the same threshold to the
dataset in other software.

#+begin_src python
threshold
#+end_src

#+begin_example
120
#+end_example

Using numpy arrays, we can apply the threshold by applying the =>==
operator. The result will be a binary image.

#+begin_src python
binary_image = image >= threshold

imshow(binary_image)
#+end_src

[[file:b90566e4416decdf2bb502e651b07ddb591f32ae.png]]

We can also determine in which type the binary image is processed by
printing out minimum and maximum of the image:

#+begin_src python
binary_image.max()
#+end_src

#+begin_example
True
#+end_example

#+begin_src python
binary_image.min()
#+end_src

#+begin_example
False
#+end_example

As shown earlier, matplotlib allows us to draw an outline on top of an
image visualized using =imshow= using the =contour= command.

#+begin_src python
# create a new plot
fig, axes = plt.subplots(1,1)

# add two images
axes.imshow(image, cmap=plt.cm.gray)
axes.contour(binary_image, [0.5], linewidths=1.2, colors='r')
#+end_src

#+begin_example
<matplotlib.contour.QuadContourSet at 0x2b57076dc70>
#+end_example

[[file:c305ddbd5bdc5dbe919c9c6e9d6d57b7aeecb215.png]]

There is a list of
[[https://scikit-image.org/docs/dev/auto_examples/segmentation/plot_thresholding.html][thresholding
algorithms]] available. It is possible to apply them all to your data
and see differences:

#+begin_src python
fig, ax = try_all_threshold(image, figsize=(10, 8), verbose=False)
plt.show()
#+end_src

[[file:bfb08e5b930b0b91826d608748e8c003dab2cf5b.png]]

** Thresholding using pyclesperanto
   :PROPERTIES:
   :CUSTOM_ID: thresholding-using-pyclesperanto
   :END:
Furthermore, also other libraries such as
[[https://github.com/clesperanto/pyclesperanto_prototype/][pyclesperanto]]
offer thresholding algorithms. The implementation here does not return
the threshold, it directly returns the binary image.

#+begin_src python
binary_image2 = cle.threshold_otsu(image)
imshow(binary_image2)
#+end_src

[[file:d4e34a4e68998ca6f384360a5baf37f5fef0067b.png]]

Here we can also see that different libraries store binary images in
different ways. pyclesperanto for example stores the positive pixels in
binary images not as =True= but with a =1= instead:

#+begin_src python
binary_image2.max()
#+end_src

#+begin_example
1.0
#+end_example

#+begin_src python
binary_image2.min()
#+end_src

#+begin_example
0.0
#+end_example

** Thresholding using SimpleITK
   :PROPERTIES:
   :CUSTOM_ID: thresholding-using-simpleitk
   :END:
Also [[https://simpleitk.readthedocs.io/][SimpleITK]] offers
thresholding algorithms which can be found in the
[[https://simpleitk.readthedocs.io/en/master/filters.html][list of
filters]]. For scripting convenience, we use here
[[https://github.com/haesleinhuepf/napari-simpleitk-image-processing][napari-simpleitk-image-processing]]
a scriptable napari plugin that offers some SimpleITK functions in a
more accessible way. We can program a small for-loop that tries all the
thresholding alogrithms in SimpleITK and shows us the results:

#+begin_src python
threshold_algorithms = [
    nsitk.threshold_huang,
    nsitk.threshold_intermodes,
    nsitk.threshold_isodata,
    nsitk.threshold_kittler_illingworth,
    nsitk.threshold_li,
    nsitk.threshold_maximum_entropy,
    nsitk.threshold_moments,
    nsitk.threshold_otsu,
    nsitk.threshold_renyi_entropy,
    nsitk.threshold_shanbhag,
    nsitk.threshold_triangle,
    nsitk.threshold_yen
]

for algorithm in threshold_algorithms:
    # show name of algorithm above the image
    print(algorithm.__name__)
    
    # binarize the image using the given algorithm
    binary_image = algorithm(image)
    
    # show the segmentation result
    imshow(binary_image)
#+end_src

#+begin_example
threshold_huang
#+end_example

[[file:81831bda0bf7743f0c8cb9693b1507b071b89c81.png]]

#+begin_example
threshold_intermodes
#+end_example

[[file:2faeaf9072bb55f0fc42c871a341cf50e9c9ac3a.png]]

#+begin_example
threshold_isodata
#+end_example

[[file:2faeaf9072bb55f0fc42c871a341cf50e9c9ac3a.png]]

#+begin_example
threshold_kittler_illingworth
#+end_example

[[file:7495afe375273e8e3d972bbc9765f70754885223.png]]

#+begin_example
threshold_li
#+end_example

[[file:54009e6805a0b8df5b7e015fe506229c12e68bbf.png]]

#+begin_example
threshold_maximum_entropy
#+end_example

[[file:b90566e4416decdf2bb502e651b07ddb591f32ae.png]]

#+begin_example
threshold_moments
#+end_example

[[file:2faeaf9072bb55f0fc42c871a341cf50e9c9ac3a.png]]

#+begin_example
threshold_otsu
#+end_example

[[file:d4e34a4e68998ca6f384360a5baf37f5fef0067b.png]]

#+begin_example
threshold_renyi_entropy
#+end_example

[[file:ab329275b09a02a24e616a8f707bfdaa42a5d259.png]]

#+begin_example
threshold_shanbhag
#+end_example

[[file:8a0326c74c85e7bbf5fa4f6032163cbed3d5ca66.png]]

#+begin_example
threshold_triangle
#+end_example

[[file:d4e34a4e68998ca6f384360a5baf37f5fef0067b.png]]

#+begin_example
threshold_yen
#+end_example

[[file:b62e6b503283bdf65adfda12287d9eb8107d06ce.png]]

* Exercise
  :PROPERTIES:
  :CUSTOM_ID: exercise
  :END:
Segment blobs.tif using the Yen algorithm. Use matplotlib to draw a
green outline of the segmented objects around the regions on the
original image.

#+begin_src python
#+end_src

Segment the image using a calculated threshold according to this
equation:

#+begin_src python
threshold = mean + 2 * standard_deviation
#+end_src

#+begin_src python
#+end_src

Visualize the resulting segmentation with a red outline on top of the
original image and the green outline from above.

#+begin_src python
#+end_src

Alternatively, put both segmentation results in napari and compare it
there visually.

#+begin_src python
#+end_src
