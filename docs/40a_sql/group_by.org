<<85b63768-dc58-4f62-8297-1a90c26f5c36>>
** Summarizing measurements
   :PROPERTIES:
   :CUSTOM_ID: summarizing-measurements
   :END:
From an SQL-accessible database containing information about
experiments, images acquired during the experiments and corresponding
measurements, we would like to extract summary statistics.

<<f9f790d9-22b3-4160-9785-75aa4c661c1d>>
#+begin_src python
import pandas as pd
from pandasql import sqldf
#+end_src

<<805125bc-d88c-4a4b-9a92-001e2ff098e6>>
#+begin_src python
experiment = pd.read_csv("../../data/experiments.csv")
image = pd.read_csv("../../data/images.csv")
overview = pd.read_csv("../../data/overview.csv")
#+end_src

<<8580ae00-7a1d-4239-b9cc-946bfc9bf705>>
#+begin_src python
query_database = lambda q: sqldf(q, globals())
#+end_src

<<ba23795e-9f8e-4e08-a719-4e708514443b>>
** Example data
   :PROPERTIES:
   :CUSTOM_ID: example-data
   :END:
Just a reminder, our overview table contains the key information
retrieved from our database about the number of cells counted in images
which were acquired during experiments.

<<8db92849-9040-4b7b-8b9d-5c19c0dc08b3>>
#+begin_src python
query = """
SELECT *
FROM overview
"""

query_database(query)
#+end_src

#+begin_example
    Unnamed: 0 experiment_name    Filename  time_after_exposure_in_s  \
0            0       High dose  image0.tif                         0   
1            1       High dose  image0.tif                         1   
2            2       High dose  image0.tif                         2   
3            3       High dose  image0.tif                         3   
4            4       High dose  image0.tif                         4   
..         ...             ...         ...                       ...   
95          95         Control  image9.tif                         5   
96          96         Control  image9.tif                         6   
97          97         Control  image9.tif                         7   
98          98         Control  image9.tif                         8   
99          99         Control  image9.tif                         9   

    number_of_cells  
0                96  
1                47  
2                32  
3                24  
4                19  
..              ...  
95              142  
96              148  
97              144  
98              141  
99              140  

[100 rows x 5 columns]
#+end_example

<<3c3e5fa2-5aa8-4d59-b137-5317e9054bc5>>
** Grouping rows
   :PROPERTIES:
   :CUSTOM_ID: grouping-rows
   :END:
The =GROUP BY= statement allows to group long tables to shorter ones and
it allows us to do descriptive statistics. We can for example determine
the smallest and largest number of cells observed during an experiment
using the so called aggregators =MIN()= and =MAX()=.

<<57f5aa4c-31c0-4a5d-8605-b23b0c62679e>>
#+begin_src python
query = """
SELECT experiment_name, MIN(number_of_cells), MAX(number_of_cells)
FROM overview
GROUP BY experiment_name
"""

query_database(query)
#+end_src

#+begin_example
  experiment_name  MIN(number_of_cells)  MAX(number_of_cells)
0         Control                   113                   159
1       High dose                     9                   151
2     Medium dose                     7                   158
#+end_example

<<0949d398-13a4-4835-b326-5ecd4ba80a6b>>
Groups can also be formed using multiple columns. Here we also see that
it is common to specify columns used for grouping twice, once after
=GROUP BY= and once after =SELECT= because we want to see the grouping
in the table.

<<7e856deb-b824-4a8f-b0cd-4daa1a4a9824>>
#+begin_src python
query = """
SELECT experiment_name, Filename, MIN(number_of_cells), MAX(number_of_cells)
FROM overview
GROUP BY experiment_name, Filename
"""

query_database(query)
#+end_src

#+begin_example
  experiment_name    Filename  MIN(number_of_cells)  MAX(number_of_cells)
0         Control  image6.tif                   147                   156
1         Control  image7.tif                   113                   122
2         Control  image8.tif                   145                   159
3         Control  image9.tif                   140                   149
4       High dose  image0.tif                     9                    96
5       High dose  image1.tif                    15                   151
6       High dose  image2.tif                     9                    97
7     Medium dose  image3.tif                    15                   158
8     Medium dose  image4.tif                     7                    76
9     Medium dose  image5.tif                    14                   147
#+end_example

<<b07b09a7-0f7e-4198-a971-6dd8c43d8d5b>>
A similar strategy uses the =COUNT= aggregator to count the number of
images acquired per experiment.

<<c592c42b-e90a-4318-9407-128d6f4d9055>>
#+begin_src python
query = """
SELECT experiment_name, COUNT(Filename)
FROM overview
GROUP BY experiment_name
"""

query_database(query)
#+end_src

#+begin_example
  experiment_name  COUNT(Filename)
0         Control               40
1       High dose               30
2     Medium dose               30
#+end_example

<<b4c24928-ffee-4c62-898c-a913041fe0f2>>
** Combining statistics
   :PROPERTIES:
   :CUSTOM_ID: combining-statistics
   :END:
Assume the measurements in our database result from a timelapse
analysis. A quick look into a single image file and corresponding
measurements shows that the number of cells is decreasing over time.

<<7a017ff6-1cf3-45ef-9b66-09c5a07679da>>
#+begin_src python
query = """
SELECT *
FROM overview
WHERE Filename = "image0.tif"
"""

query_database(query)
#+end_src

#+begin_example
   Unnamed: 0 experiment_name    Filename  time_after_exposure_in_s  \
0           0       High dose  image0.tif                         0   
1           1       High dose  image0.tif                         1   
2           2       High dose  image0.tif                         2   
3           3       High dose  image0.tif                         3   
4           4       High dose  image0.tif                         4   
5           5       High dose  image0.tif                         5   
6           6       High dose  image0.tif                         6   
7           7       High dose  image0.tif                         7   
8           8       High dose  image0.tif                         8   
9           9       High dose  image0.tif                         9   

   number_of_cells  
0               96  
1               47  
2               32  
3               24  
4               19  
5               16  
6               13  
7               11  
8               10  
9                9  
#+end_example

<<beb4fa47-1bd5-498e-b69d-832a143fb77d>>
We can now determine the average number of cells at the beginning of the
experiment by averaging the first 3 timepoints.

<<c8193b5c-485c-4a8b-a4ca-6a572c860237>>
#+begin_src python
query = """
SELECT Filename, AVG(number_of_cells) as number_of_cells
FROM overview
WHERE time_after_exposure_in_s < 3
GROUP BY Filename
"""

query_database(query)
#+end_src

#+begin_example
     Filename  number_of_cells
0  image0.tif        58.333333
1  image1.tif        93.000000
2  image2.tif        58.000000
3  image3.tif        97.333333
4  image4.tif        46.333333
5  image5.tif        89.666667
6  image6.tif       150.666667
7  image7.tif       113.666667
8  image8.tif       151.000000
9  image9.tif       147.666667
#+end_example

<<2805d88b-7b2b-48bf-9d79-3f4896199990>>
#+begin_src python
query = """
SELECT Filename, AVG(number_of_cells) as number_of_cells
FROM overview
WHERE time_after_exposure_in_s < 3
GROUP BY Filename
"""
cell_count_early = query_database(query)
#+end_src

<<86b4e49f-a9ec-4fb7-9ce1-0a43cc40feb2>>
#+begin_src python
query = """ 
SELECT Filename, AVG(number_of_cells) as number_of_cells
FROM overview
WHERE time_after_exposure_in_s > 6
GROUP BY Filename;
"""
cell_count_late = query_database(query)
#+end_src

<<ae17ddb7-4fa8-4eef-a79a-ff3562e989c2>>
#+begin_src python
query = """
SELECT cell_count_early.Filename, (cell_count_late.number_of_cells / cell_count_early.number_of_cells) AS cell_count_ratio
FROM cell_count_early
INNER JOIN cell_count_late ON cell_count_early.Filename = cell_count_late.Filename
"""

cell_count_ratio_overview = query_database(query)
cell_count_ratio_overview
#+end_src

#+begin_example
     Filename  cell_count_ratio
0  image0.tif          0.171429
1  image1.tif          0.182796
2  image2.tif          0.172414
3  image3.tif          0.171233
4  image4.tif          0.172662
5  image5.tif          0.174721
6  image6.tif          0.986726
7  image7.tif          1.055718
8  image8.tif          0.991170
9  image9.tif          0.959368
#+end_example

<<2701323c-8ef0-459a-b10f-6a15b133eccb>>
We know now the fraction of cells which survived in which file. We need
to use the =JOIN= statement again to know in which experiment these
survival ratios were observed.

<<bf78f4fc-0783-4f39-b0fd-d2376a2f0a8f>>
#+begin_src python
query = """
SELECT experiment.Comment, cell_count_ratio_overview.cell_count_ratio
FROM cell_count_ratio_overview
INNER JOIN image ON cell_count_ratio_overview.Filename = image.Filename
INNER JOIN experiment ON image.experiment_ID = experiment.ID
"""

query_database(query)
#+end_src

#+begin_example
       Comment  cell_count_ratio
0    High dose          0.171429
1    High dose          0.182796
2    High dose          0.172414
3  Medium dose          0.171233
4  Medium dose          0.172662
5  Medium dose          0.174721
6      Control          0.986726
7      Control          1.055718
8      Control          0.991170
9      Control          0.959368
#+end_example

<<aa20382d-11f4-4d74-948d-dd3397eaa0c0>>
Also these can be summarized using the =GROUP BY= statement. Good
scientists do not just report the average of these measurements but also
the number of images which have been analyzed.

<<3294fd6a-14f2-46f5-8436-6d5079fed30c>>
#+begin_src python
query = """
SELECT 
    experiment.Comment as experiment_name, 
    AVG(cell_count_ratio_overview.cell_count_ratio) as mean_cell_count_ratio, 
    COUNT(cell_count_ratio_overview.cell_count_ratio) as num_images
FROM cell_count_ratio_overview
INNER JOIN image ON cell_count_ratio_overview.Filename = image.Filename
INNER JOIN experiment ON image.experiment_ID = experiment.ID
GROUP BY experiment.Comment
"""

query_database(query)
#+end_src

#+begin_example
  experiment_name  mean_cell_count_ratio  num_images
0         Control               0.998246           4
1       High dose               0.175546           3
2     Medium dose               0.172872           3
#+end_example

<<94d78d2f-444c-4dc4-b968-e1c960d3a40d>>
** Exercise
   :PROPERTIES:
   :CUSTOM_ID: exercise
   :END:
Determine the average cell count over the entire timelapse for all
images individually.

<<cdebfca7-6763-472e-a7f7-0e210327d02f>>
#+begin_src python
#+end_src

<<8a87efed-deeb-4e50-a983-f2f2f98bbae7>>
Summarize these measurements for individual images to present the
average for each experiment.

<<6e04c721-174c-480f-a146-cf6426b717fb>>
#+begin_src python
#+end_src
