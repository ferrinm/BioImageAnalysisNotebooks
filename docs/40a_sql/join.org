<<fa63f581-f411-4e3c-8a36-255c1c986389>>
* Combining tables
  :PROPERTIES:
  :CUSTOM_ID: combining-tables
  :END:
When working with many tables in a relational database, it often makes
sense to combine tables in summary tables and store them before further
processing. Just as a reminder, we acquired =images= during the
=experiments= and corresponding =measurements=. We now would like to
extract an =overview= table that contains the most important information
from =image=, =experiments= and =measurements=.

<<91c81c85-dce7-4b20-9654-ad52d051743d>>
#+begin_src python
import pandas as pd
from pandasql import sqldf
#+end_src

<<0cc6f21c-83ac-4265-b78a-96fa48992420>>
We again start by loading our tables from disc.

<<6a98379e-c60d-4ce2-81e7-2ad47c5225e4>>
#+begin_src python
experiment = pd.read_csv("../../data/experiments.csv")
image = pd.read_csv("../../data/images.csv")
measurement = pd.read_csv("../../data/measurements.csv")
#+end_src

<<3dfa47bc-7f85-49fb-8a62-57b6b65054ae>>
Again, we define a function that can query the database.

<<bdec6f91-22c5-404f-a436-b23a29506e9a>>
#+begin_src python
query_database = lambda q: sqldf(q, globals())
#+end_src

<<6ac03be8-a9b5-484b-94ac-691fae805a66>>
** Inner Join
   :PROPERTIES:
   :CUSTOM_ID: inner-join
   :END:
SQL also allows combining tables using the =JOIN= statement. Most common
is the =INNER JOIN= which allows to combine two tables in a way that
rows are matched according to a defined connection =ON= which the tables
are combined. The =INNER JOIN= makes sure that only rows are shown to
which both tables have entries. That's why experiment =ID 4= is not
shown in the following table. There were no images stored during
experiment 4.

<<085814f5-0cfc-4df5-9661-12e99077c55a>>
#+begin_src python
query = """
SELECT * 
FROM experiment
INNER JOIN image ON experiment.ID = image.experiment_ID
"""

query_database(query)
#+end_src

#+begin_example
   Unnamed: 0  ID      Comment  Concentration  Unnamed: 0  ID    Filename  \
0           0   1    High dose             50           0   1  image0.tif   
1           0   1    High dose             50           1   2  image1.tif   
2           0   1    High dose             50           2   3  image2.tif   
3           1   2  Medium dose             20           3   4  image3.tif   
4           1   2  Medium dose             20           4   5  image4.tif   
5           1   2  Medium dose             20           5   6  image5.tif   
6           2   3      Control              0           6   7  image6.tif   
7           2   3      Control              0           7   8  image7.tif   
8           2   3      Control              0           8   9  image8.tif   
9           2   3      Control              0           9  10  image9.tif   

   experiment_ID  
0              1  
1              1  
2              1  
3              2  
4              2  
5              2  
6              3  
7              3  
8              3  
9              3  
#+end_example

<<3720de6f-5400-44da-b80a-3490e153f81b>>
** Outer Join
   :PROPERTIES:
   :CUSTOM_ID: outer-join
   :END:
If one wanted to combine the tables in a way that also experiment 4 is
listed, we need to use an =OUTER JOIN=. In this case, as the experiments
table is on the left of our SQL statement, we use the =LEFT OUTER JOIN=.
Experiment 4 is then listed in our table with some =NaNs= in the columns
of the images.

<<81fc2293-82f2-4e21-9c9b-180e0de8e0da>>
#+begin_src python
query = """
SELECT * 
FROM experiment
LEFT OUTER JOIN image ON experiment.ID = image.experiment_ID
"""

query_database(query)
#+end_src

#+begin_example
    Unnamed: 0  ID          Comment  Concentration  Unnamed: 0    ID  \
0            0   1        High dose             50         0.0   1.0   
1            0   1        High dose             50         1.0   2.0   
2            0   1        High dose             50         2.0   3.0   
3            1   2      Medium dose             20         3.0   4.0   
4            1   2      Medium dose             20         4.0   5.0   
5            1   2      Medium dose             20         5.0   6.0   
6            2   3          Control              0         6.0   7.0   
7            2   3          Control              0         7.0   8.0   
8            2   3          Control              0         8.0   9.0   
9            2   3          Control              0         9.0  10.0   
10           3   4  Super high dose           1000         NaN   NaN   

      Filename  experiment_ID  
0   image0.tif            1.0  
1   image1.tif            1.0  
2   image2.tif            1.0  
3   image3.tif            2.0  
4   image4.tif            2.0  
5   image5.tif            2.0  
6   image6.tif            3.0  
7   image7.tif            3.0  
8   image8.tif            3.0  
9   image9.tif            3.0  
10        None            NaN  
#+end_example

<<358d911d-a0f9-49af-8a79-e37265900588>>
** Combining many tables
   :PROPERTIES:
   :CUSTOM_ID: combining-many-tables
   :END:
The =JOIN= statements above can also be used in chains to combine more
than two tables. For example, we might be interested in the number of
cells over time for every image in every experiment

<<abccf546-bff8-4fdb-9767-caf87ed0ac78>>
#+begin_src python
query = """
SELECT * 
FROM experiment
LEFT OUTER JOIN image ON experiment.ID = image.experiment_ID
INNER JOIN measurement ON image.ID = measurement.image_ID
"""

query_database(query)
#+end_src

#+begin_example
    Unnamed: 0  ID    Comment  Concentration  Unnamed: 0  ID    Filename  \
0            0   1  High dose             50           0   1  image0.tif   
1            0   1  High dose             50           0   1  image0.tif   
2            0   1  High dose             50           0   1  image0.tif   
3            0   1  High dose             50           0   1  image0.tif   
4            0   1  High dose             50           0   1  image0.tif   
..         ...  ..        ...            ...         ...  ..         ...   
95           2   3    Control              0           9  10  image9.tif   
96           2   3    Control              0           9  10  image9.tif   
97           2   3    Control              0           9  10  image9.tif   
98           2   3    Control              0           9  10  image9.tif   
99           2   3    Control              0           9  10  image9.tif   

    experiment_ID  Unnamed: 0  image_ID  time_after_exposure_in_s  \
0               1           0         1                         0   
1               1           1         1                         1   
2               1           2         1                         2   
3               1           3         1                         3   
4               1           4         1                         4   
..            ...         ...       ...                       ...   
95              3          95        10                         5   
96              3          96        10                         6   
97              3          97        10                         7   
98              3          98        10                         8   
99              3          99        10                         9   

    number_of_cells  
0                96  
1                47  
2                32  
3                24  
4                19  
..              ...  
95              142  
96              148  
97              144  
98              141  
99              140  

[100 rows x 12 columns]
#+end_example

<<c4e3c84f-ce67-4371-8cbb-23b249e4db6b>>
** Selecting columns
   :PROPERTIES:
   :CUSTOM_ID: selecting-columns
   :END:
When a table becomes too wide and has columns we do not really need for
our analysis, it is recommended to replace the =*= in the =SELECT=
statement with column names.

<<bdd1174b-8da6-43ee-8e82-7ecca2af9bb9>>
#+begin_src python
query = """
SELECT experiment.Comment, image.Filename, measurement.time_after_exposure_in_s, measurement.number_of_cells
FROM experiment
LEFT OUTER JOIN image ON experiment.ID = image.experiment_ID
INNER JOIN measurement ON image.ID = measurement.image_ID
"""

query_database(query)
#+end_src

#+begin_example
      Comment    Filename  time_after_exposure_in_s  number_of_cells
0   High dose  image0.tif                         0               96
1   High dose  image0.tif                         1               47
2   High dose  image0.tif                         2               32
3   High dose  image0.tif                         3               24
4   High dose  image0.tif                         4               19
..        ...         ...                       ...              ...
95    Control  image9.tif                         5              142
96    Control  image9.tif                         6              148
97    Control  image9.tif                         7              144
98    Control  image9.tif                         8              141
99    Control  image9.tif                         9              140

[100 rows x 4 columns]
#+end_example

<<60bf8445-ebec-4d4a-b027-420e316c66c8>>
** Renaming columns
   :PROPERTIES:
   :CUSTOM_ID: renaming-columns
   :END:
Using the =AS= statement, we can also rename columns and make our new
table easier to read and understand.

<<6e230a1f-bcdf-4c37-a6f5-3941d1cc1abe>>
#+begin_src python
query = """
SELECT experiment.Comment AS experiment_name, image.Filename, measurement.time_after_exposure_in_s, measurement.number_of_cells
FROM experiment
LEFT OUTER JOIN image ON experiment.ID = image.experiment_ID
INNER JOIN measurement ON image.ID = measurement.image_ID
"""

query_database(query)
#+end_src

#+begin_example
   experiment_name    Filename  time_after_exposure_in_s  number_of_cells
0        High dose  image0.tif                         0               96
1        High dose  image0.tif                         1               47
2        High dose  image0.tif                         2               32
3        High dose  image0.tif                         3               24
4        High dose  image0.tif                         4               19
..             ...         ...                       ...              ...
95         Control  image9.tif                         5              142
96         Control  image9.tif                         6              148
97         Control  image9.tif                         7              144
98         Control  image9.tif                         8              141
99         Control  image9.tif                         9              140

[100 rows x 4 columns]
#+end_example

<<65dda887-e902-4eb8-822d-84cdcc0671c6>>
As this statement is quite complicated and we should not copy past it
over and over, we can store it in a pandas DataFrame =overview=.

<<9d8cc542-24f4-4b66-9bc9-294c80b021eb>>
#+begin_src python
query = """
SELECT experiment.Comment AS experiment_name, image.Filename, measurement.time_after_exposure_in_s, measurement.number_of_cells
FROM experiment
LEFT OUTER JOIN image ON experiment.ID = image.experiment_ID
INNER JOIN measurement ON image.ID = measurement.image_ID
"""

overview = query_database(query)
#+end_src

<<24bfdcd8-b925-4560-96b3-5ff44b2b979f>>
The =overview= table is part of our database. Note: The overview was not
saved to disc yet.

<<933543b3-5bab-4cdc-b37e-48c7cf7c52e3>>
#+begin_src python
query = """
SELECT * 
FROM overview
"""

query_database(query)
#+end_src

#+begin_example
   experiment_name    Filename  time_after_exposure_in_s  number_of_cells
0        High dose  image0.tif                         0               96
1        High dose  image0.tif                         1               47
2        High dose  image0.tif                         2               32
3        High dose  image0.tif                         3               24
4        High dose  image0.tif                         4               19
..             ...         ...                       ...              ...
95         Control  image9.tif                         5              142
96         Control  image9.tif                         6              148
97         Control  image9.tif                         7              144
98         Control  image9.tif                         8              141
99         Control  image9.tif                         9              140

[100 rows x 4 columns]
#+end_example

<<62b464c1-c67b-4b1b-8353-a96da5e26761>>
For reuse in later lessons, we save the summary to disc.

<<e34a8b8d-08f1-4d15-90ed-cdf8b98cf389>>
#+begin_src python
overview.to_csv("../../data/overview.csv")
#+end_src

<<60c4b936-d4e6-4076-8c76-fd47826eca63>>
#+begin_src python
#+end_src
