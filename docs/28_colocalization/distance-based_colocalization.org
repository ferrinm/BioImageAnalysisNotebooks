<<ca658d13>>
* Distance-based colocalization
  :PROPERTIES:
  :CUSTOM_ID: distance-based-colocalization
  :END:
A common bio-image analysis task is counting cells and other objects
depending on their existence in multiple channels and distances between
these objects. When analyzing objects according to distances to object
in other channels, one can also count different objects which express
signal in different channels. If objects are in different places
close-by, they are technically not colocalized, but the analysis shown
here also work for these use-cases.

<<7d241e8a>>
#+begin_src python
import pyclesperanto_prototype as cle
import numpy as np
from skimage.io import imread, imshow
import matplotlib.pyplot as plt

cle.get_device()
#+end_src

#+begin_example
<Intel(R) Iris(R) Xe Graphics on Platform: Intel(R) OpenCL HD Graphics (1 refs)>
#+end_example

<<018b7d7f>>
We're using a dataset published by
[[https://doi.org/10.1091/mbc.E13-04-0221][Heriche et al.]] licensed
[[https://creativecommons.org/licenses/by/4.0/][CC BY 4.0]] available in
the [[https://idr.openmicroscopy.org/webclient/img_detail/179719/][Image
Data Resource]].

<<5e88fc90>>
#+begin_src python
# load file
raw_image = imread('../../data/plate1_1_013 [Well 5, Field 1 (Spot 5)].png')

# pixel size (from meta data)
pixel_size_xy_in_micron = 0.32

# visualize
imshow(raw_image)
#+end_src

#+begin_example
<matplotlib.image.AxesImage at 0x1f65e1a1850>
#+end_example

[[file:e6b5e9741c417a58202d1ced1a91d0a1de33abcc.png]]

<<f2f9f7b8>>
First, we need to split channels
([[https://github.com/BiAPoL/Bio-image_Analysis_with_Python/blob/a62070dee408814cee4258758f5187f135774519/image_processing/03_multi_channel_image_data.ipynb][read
more]]). After that, we can actually see that not all cells marked with
Cy3 (channel 0) are also marked with eGFP (channel 1):

<<371724b7>>
#+begin_src python
# extract channels
channel_0 = raw_image[...,0]
channel_1 = raw_image[...,1]

# visualize
fig, axs = plt.subplots(1, 2, figsize=(15,15))
axs[0].imshow(channel_0, cmap='gray')
axs[1].imshow(channel_1, cmap='gray')
#+end_src

#+begin_example
<matplotlib.image.AxesImage at 0x1f65e2009a0>
#+end_example

[[file:10a6fd8e495c19095dda2ab001c9c633f00bb35b.png]]

<<023f719c>>
** Segmenting nuclei
   :PROPERTIES:
   :CUSTOM_ID: segmenting-nuclei
   :END:
As the staining marks the whole nucleus in both cases, it is reasonable
to segmentn nuclei in both images and then process the segmented images
further. We use
[[https://github.com/clEsperanto/pyclesperanto_prototype/blob/f9c9b73c1f9f194fdabdab8bd8507eb73c3ef8c9/demo/segmentation/voronoi_otsu_labeling.ipynb][Voronoi-Otsu-Labeling]]
for the segmentation because it is a quick and straightforward approach.

<<03e96838>>
#+begin_src python
# segmentation
nuclei_cy3 = cle.voronoi_otsu_labeling(channel_0, spot_sigma=20)
nuclei_egfp = cle.voronoi_otsu_labeling(channel_1, spot_sigma=20)

# visualize
fig, axs = plt.subplots(1, 2, figsize=(15,15))
cle.imshow(nuclei_cy3, plot=axs[0], labels=True)
cle.imshow(nuclei_egfp, plot=axs[1], labels=True)
#+end_src

[[file:b7b7b107dd4ced0ddb9a1e44b52255be37e4d954.png]]

<<0a3884ef>>
The above shown label images have inside nuclei pixel intensity values
that correspond to the number of the nucleus. In nucleus 1, all pixels
have intensity 1. In nucleus 2, all pixels have intensity 2 and so on.
We can then reduce these images to their centroids to later determine
distances between objects in multiple channels.

<<5667256c>>
#+begin_src python
centroids_cy3 = cle.centroids_of_labels(nuclei_cy3)
centroids_egfp = cle.centroids_of_labels(nuclei_egfp)
#+end_src

<<6a779db4-e6de-4e93-853c-2bcc72ba1dbe>>
These =centroids_...= variables are coordinate lists. Hence, if we print
out their =shape=, we can already note that there are more =cy3=
positive nuclei than =egfp= postives:

<<1e49104e-af74-4bfc-bb60-a3eedece6c1b>>
#+begin_src python
print(centroids_cy3.shape, centroids_egfp.shape)
#+end_src

#+begin_example
(2, 31) (2, 23)
#+end_example

<<6ee160c0-5d2d-4be5-ad20-c7ba6d38c847>>
** Distance matrix
   :PROPERTIES:
   :CUSTOM_ID: distance-matrix
   :END:
We compute now the distance of all =centroids_cy3= versus all
=centroids_egfp=. Note the shape of the distance matrix tells us that
all =cy3= positives lie on the x-axis and =egfp=-positive centroids on
the y-axis:

<<d6cc3ec2-fa75-4f55-8e0b-6a6bd2abc206>>
#+begin_src python
distance_matrix = cle.generate_distance_matrix(centroids_cy3, centroids_egfp)
distance_matrix
#+end_src

#+begin_example
cl.OCLArray([[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 6.54030752e+00, 7.82682983e+02, 5.06495544e+02,
        5.30497314e+02, 1.07481958e+03, 7.91600891e+02, 6.02906616e+02,
        6.57973022e+02, 9.23156311e+02, 7.09134155e+02, 7.27826721e+02,
        7.54115051e+02, 7.85373596e+02, 9.79799500e+02, 8.83578003e+02,
        1.12951721e+03, 1.06510938e+03, 1.02250336e+03, 1.29149976e+03,
        1.03813599e+03, 1.40257227e+03, 1.33171460e+03, 1.38857349e+03,
        1.44623132e+03, 1.46175098e+03, 1.56747668e+03, 1.54672949e+03,
        1.52855164e+03, 1.53324097e+03, 1.64022278e+03, 1.88720886e+03],
       [0.00000000e+00, 5.10154297e+02, 1.17952515e+03, 3.36981773e+00,
        3.12130341e+02, 1.33841968e+03, 9.87138794e+02, 5.56908508e+02,
        3.32706848e+02, 1.08204810e+03, 6.17555237e+02, 4.41588989e+02,
        7.31238953e+02, 5.80590820e+02, 1.05177051e+03, 5.60654663e+02,
        1.16359900e+03, 1.03594714e+03, 6.98219299e+02, 1.38013428e+03,
        8.02029785e+02, 1.50617249e+03, 1.01399646e+03, 1.22979492e+03,
        1.15475610e+03, 1.13583630e+03, 1.48195923e+03, 1.41370728e+03,
        1.21688196e+03, 1.35897009e+03, 1.50313525e+03, 1.86785327e+03],
       [0.00000000e+00, 5.35841309e+02, 9.93919250e+02, 3.16157806e+02,
        1.96462023e+00, 1.07249683e+03, 7.12699951e+02, 2.49930725e+02,
        1.40156082e+02, 7.91201904e+02, 3.03902435e+02, 1.98405533e+02,
        4.19099365e+02, 2.90854492e+02, 7.43736328e+02, 3.53693512e+02,
        8.50658508e+02, 7.22632446e+02, 4.93788727e+02, 1.07002319e+03,
        5.37767090e+02, 1.19674622e+03, 8.07613220e+02, 9.42470215e+02,
        9.30908752e+02, 9.36963013e+02, 1.17886414e+03, 1.12100635e+03,
        1.00781512e+03, 1.07871594e+03, 1.21250403e+03, 1.55736768e+03],
       [0.00000000e+00, 1.07322717e+03, 4.44709717e+02, 1.34140869e+03,
        1.07418213e+03, 2.99143344e-01, 3.60388367e+02, 8.38776001e+02,
        1.16903174e+03, 3.26066498e+02, 8.52533081e+02, 1.12009851e+03,
        7.32585449e+02, 1.00352087e+03, 4.87072693e+02, 1.19727197e+03,
        5.64549683e+02, 6.92142578e+02, 1.24332935e+03, 4.88558960e+02,
        1.08580481e+03, 5.17053101e+02, 1.37598035e+03, 1.06557239e+03,
        1.38423206e+03, 1.47200183e+03, 1.00960040e+03, 1.09812476e+03,
        1.48162659e+03, 1.17885876e+03, 1.16573645e+03, 1.10616272e+03],
       [0.00000000e+00, 7.92731567e+02, 4.72356018e+02, 9.91693481e+02,
        7.16097290e+02, 3.59227783e+02, 1.44743443e+00, 4.80279114e+02,
        8.10389648e+02, 1.37372757e+02, 5.01802399e+02, 7.64911011e+02,
        3.90457062e+02, 6.57536316e+02, 2.74826294e+02, 8.52490784e+02,
        4.24979950e+02, 4.68381104e+02, 9.14044312e+02, 5.16654724e+02,
        7.77781250e+02, 6.16704651e+02, 1.09106836e+03, 8.73643677e+02,
        1.12793872e+03, 1.20113501e+03, 9.21702576e+02, 9.63377625e+02,
        1.22668213e+03, 1.00929248e+03, 1.04773645e+03, 1.15111658e+03],
       [0.00000000e+00, 6.07224548e+02, 8.26992432e+02, 5.61124695e+02,
        2.53395782e+02, 8.37353088e+02, 4.77123962e+02, 1.71319878e+00,
        3.31987091e+02, 5.43207520e+02, 1.07321236e+02, 2.93860229e+02,
        1.77609116e+02, 2.33582336e+02, 4.93634949e+02, 4.11359741e+02,
        6.08618408e+02, 4.97022858e+02, 5.13842285e+02, 8.21771912e+02,
        4.60428864e+02, 9.47818848e+02, 7.80239624e+02, 7.85852539e+02,
        8.72365906e+02, 9.08227234e+02, 9.82798645e+02, 9.48379517e+02,
        9.62703552e+02, 9.30200806e+02, 1.04183264e+03, 1.33810071e+03],
       [0.00000000e+00, 6.62960144e+02, 1.12074915e+03, 3.34834930e+02,
        1.37104645e+02, 1.16695569e+03, 8.06577026e+02, 3.27912659e+02,
        2.36661553e+00, 8.68879883e+02, 3.39661926e+02, 1.08207962e+02,
        4.67318878e+02, 2.56235962e+02, 7.95635559e+02, 2.40991760e+02,
        8.82600464e+02, 7.37484070e+02, 3.83718658e+02, 1.11171143e+03,
        4.68669403e+02, 1.23934314e+03, 7.02681763e+02, 8.97298401e+02,
        8.35560059e+02, 8.29698059e+02, 1.15649561e+03, 1.08236206e+03,
        9.05510986e+02, 1.02546436e+03, 1.17101709e+03, 1.55181714e+03],
       [0.00000000e+00, 9.24192688e+02, 5.67157654e+02, 1.08597607e+03,
        7.94058167e+02, 3.25398834e+02, 1.38212418e+02, 5.45845764e+02,
        8.72174500e+02, 9.96140599e-01, 5.41036926e+02, 8.11865234e+02,
        4.15984772e+02, 6.85832214e+02, 1.79864700e+02, 8.77611084e+02,
        3.08649841e+02, 3.90173706e+02, 9.18687744e+02, 3.78996490e+02,
        7.61378906e+02, 4.80721649e+02, 1.05748425e+03, 7.88288391e+02,
        1.07635327e+03, 1.15864246e+03, 8.03758240e+02, 8.58514893e+02,
        1.17478284e+03, 9.16652771e+02, 9.38840149e+02, 1.01539429e+03],
       [0.00000000e+00, 7.13004761e+02, 8.92268616e+02, 6.20878723e+02,
        3.06343445e+02, 8.51174194e+02, 4.98722656e+02, 1.06758316e+02,
        3.43246979e+02, 5.38439636e+02, 1.67009437e+00, 2.72608521e+02,
        1.26883430e+02, 1.60446564e+02, 4.54590057e+02, 3.54190155e+02,
        5.48422058e+02, 4.18223938e+02, 4.35627289e+02, 7.73212402e+02,
        3.59260345e+02, 9.00707397e+02, 6.83005859e+02, 6.81690674e+02,
        7.69357117e+02, 8.09543213e+02, 8.88976074e+02, 8.47604858e+02,
        8.61044067e+02, 8.25378052e+02, 9.40864258e+02, 1.25603296e+03],
       [0.00000000e+00, 7.32884277e+02, 1.11339709e+03, 4.43873779e+02,
        1.97585693e+02, 1.11815881e+03, 7.61255066e+02, 2.90134491e+02,
        1.10330170e+02, 8.08637878e+02, 2.68784790e+02, 2.24093986e+00,
        3.96144836e+02, 1.53853455e+02, 7.18440125e+02, 1.56830780e+02,
        7.93457275e+02, 6.42049500e+02, 2.95922424e+02, 1.02585388e+03,
        3.60584991e+02, 1.15329651e+03, 6.10830627e+02, 7.88035156e+02,
        7.37742065e+02, 7.39791748e+02, 1.04889099e+03, 9.73231812e+02,
        8.12023987e+02, 9.16442810e+02, 1.06177576e+03, 1.44693640e+03],
       [0.00000000e+00, 7.57521667e+02, 8.13925537e+02, 7.34554626e+02,
        4.21561615e+02, 7.31882019e+02, 3.88136322e+02, 1.79353607e+02,
        4.70450226e+02, 4.13992889e+02, 1.29308289e+02, 3.99343292e+02,
        1.00206804e+00, 2.71966492e+02, 3.28046448e+02, 4.65900909e+02,
        4.31939087e+02, 3.20999115e+02, 5.25627258e+02, 6.50694458e+02,
        4.07074402e+02, 7.77777161e+02, 7.32193542e+02, 6.44633911e+02,
        7.96924683e+02, 8.52479187e+02, 8.15487488e+02, 7.93798950e+02,
        8.93077698e+02, 7.90669983e+02, 8.87150391e+02, 1.16144788e+03],
       [0.00000000e+00, 7.89951843e+02, 1.04910144e+03, 5.83067932e+02,
        2.91815186e+02, 1.00204376e+03, 6.54390076e+02, 2.31229477e+02,
        2.58871948e+02, 6.83062744e+02, 1.57127609e+02, 1.57015610e+02,
        2.69189087e+02, 1.77586365e+00, 5.76209961e+02, 1.96710968e+02,
        6.41486084e+02, 4.87475891e+02, 2.82059143e+02, 8.75332153e+02,
        2.53848618e+02, 1.00243445e+03, 5.56714783e+02, 6.52862610e+02,
        6.62103516e+02, 6.86321655e+02, 9.01289368e+02, 8.33973938e+02,
        7.47233154e+02, 7.87826843e+02, 9.24512329e+02, 1.29453882e+03],
       [0.00000000e+00, 9.81884705e+02, 7.38429688e+02, 1.05554041e+03,
        7.46583313e+02, 4.86131805e+02, 2.74042572e+02, 4.96152985e+02,
        7.99000671e+02, 1.78209991e+02, 4.57140350e+02, 7.21846497e+02,
        3.30048248e+02, 5.79183533e+02, 1.32641184e+00, 7.60550354e+02,
        1.57269424e+02, 2.11708771e+02, 7.80668152e+02, 3.29029175e+02,
        6.08984863e+02, 4.53727905e+02, 8.90304871e+02, 6.10243164e+02,
        9.01343872e+02, 9.86752380e+02, 6.49341858e+02, 6.89591858e+02,
        9.99421814e+02, 7.40869751e+02, 7.73424438e+02, 9.11220886e+02],
       [0.00000000e+00, 8.88333618e+02, 1.23566199e+03, 5.61468750e+02,
        3.52305908e+02, 1.19541528e+03, 8.48962463e+02, 4.08064575e+02,
        2.40425659e+02, 8.74460815e+02, 3.50420471e+02, 1.54882874e+02,
        4.62748718e+02, 1.92817871e+02, 7.57133850e+02, 2.15580392e+00,
        8.03079163e+02, 6.38778809e+02, 1.43353745e+02, 1.03880237e+03,
        2.63067688e+02, 1.16397388e+03, 4.62118958e+02, 7.00586060e+02,
        5.96357544e+02, 5.89454773e+02, 9.82649292e+02, 8.89304443e+02,
        6.64955688e+02, 8.16691772e+02, 9.73061829e+02, 1.39420959e+03],
       [0.00000000e+00, 1.13171521e+03, 8.75227600e+02, 1.16677698e+03,
        8.52942139e+02, 5.64120544e+02, 4.24679413e+02, 6.10493530e+02,
        8.85338684e+02, 3.07930786e+02, 5.50176575e+02, 7.96249084e+02,
        4.33188965e+02, 6.43788208e+02, 1.57297638e+02, 8.05887939e+02,
        8.72249842e-01, 1.70342087e+02, 7.98035645e+02, 2.34911240e+02,
        6.09733887e+02, 3.60819550e+02, 8.49241455e+02, 5.01717468e+02,
        8.34401245e+02, 9.30130859e+02, 4.97350494e+02, 5.51904236e+02,
        9.29488220e+02, 6.18995239e+02, 6.30757019e+02, 7.57896484e+02],
       [0.00000000e+00, 1.06816296e+03, 9.39159424e+02, 1.03927063e+03,
        7.25094116e+02, 6.90976868e+02, 4.66841553e+02, 4.98756744e+02,
        7.40562134e+02, 3.88220184e+02, 4.19940948e+02, 6.45261780e+02,
        3.21970581e+02, 4.90187836e+02, 2.09387802e+02, 6.42196960e+02,
        1.67873566e+02, 1.62601745e+00, 6.29472656e+02, 4.01175201e+02,
        4.41139557e+02, 5.24519470e+02, 6.92782410e+02, 4.06176483e+02,
        6.93558472e+02, 7.82483398e+02, 5.04193390e+02, 5.10329742e+02,
        7.91124451e+02, 5.43186035e+02, 6.00253418e+02, 8.40385315e+02],
       [0.00000000e+00, 1.02705103e+03, 1.32568701e+03, 6.98525696e+02,
        4.92486206e+02, 1.24143591e+03, 9.10574158e+02, 5.10921173e+02,
        3.82892548e+02, 9.15514648e+02, 4.32102631e+02, 2.94394684e+02,
        5.22548096e+02, 2.78764679e+02, 7.77153809e+02, 1.42137238e+02,
        7.95072266e+02, 6.25783142e+02, 2.19658232e+00, 1.02779089e+03,
        1.93559357e+02, 1.14867102e+03, 3.19663208e+02, 6.05169678e+02,
        4.56720581e+02, 4.46816864e+02, 9.00655579e+02, 7.93072632e+02,
        5.22714844e+02, 7.07654602e+02, 8.71408203e+02, 1.31922705e+03],
       [0.00000000e+00, 1.29249658e+03, 8.88019531e+02, 1.38327063e+03,
        1.07222815e+03, 4.87770874e+02, 5.16940735e+02, 8.23637085e+02,
        1.11438770e+03, 3.79023865e+02, 7.74977539e+02, 1.02858325e+03,
        6.51951843e+02, 8.77587219e+02, 3.30221130e+02, 1.04157520e+03,
        2.36501984e+02, 4.03589478e+02, 1.03076221e+03, 1.17339373e+00,
        8.39877686e+02, 1.27057388e+02, 1.05581714e+03, 6.52945068e+02,
        1.02014911e+03, 1.12317969e+03, 5.30523743e+02, 6.37710938e+02,
        1.11003357e+03, 7.37942383e+02, 6.93888428e+02, 6.46153137e+02],
       [0.00000000e+00, 1.04264771e+03, 1.21899902e+03, 8.03630615e+02,
        5.38170593e+02, 1.08439844e+03, 7.75003235e+02, 4.59071259e+02,
        4.69819366e+02, 7.58743042e+02, 3.57213257e+02, 3.61647430e+02,
        4.04913300e+02, 2.53191559e+02, 6.05927917e+02, 2.65183167e+02,
        6.07122131e+02, 4.37775787e+02, 1.97055786e+02, 8.37226501e+02,
        1.75820005e+00, 9.56444092e+02, 3.27843903e+02, 4.37086884e+02,
        4.13322571e+02, 4.52075378e+02, 7.20032593e+02, 6.25579468e+02,
        5.03180267e+02, 5.58068726e+02, 7.10333740e+02, 1.13453894e+03],
       [0.00000000e+00, 1.33580420e+03, 1.54109839e+03, 1.01365564e+03,
        8.06311157e+02, 1.37392517e+03, 1.08771387e+03, 7.77782837e+02,
        7.01576233e+02, 1.05427869e+03, 6.79963135e+02, 6.09445312e+02,
        7.29367126e+02, 5.54230896e+02, 8.86713257e+02, 4.60751343e+02,
        8.46017639e+02, 6.88846741e+02, 3.18216461e+02, 1.05239587e+03,
        3.24612061e+02, 1.15637976e+03, 2.37033153e+00, 4.62922180e+02,
        1.51886917e+02, 1.31595139e+02, 7.61718262e+02, 6.22804016e+02,
        2.04063049e+02, 5.05724030e+02, 6.78269104e+02, 1.17610388e+03],
       [0.00000000e+00, 1.44994019e+03, 1.59031274e+03, 1.15439172e+03,
        9.29746216e+02, 1.38223547e+03, 1.12477930e+03, 8.70194336e+02,
        8.34591919e+02, 1.07329602e+03, 7.66625244e+02, 7.36612610e+02,
        7.94331360e+02, 6.60010437e+02, 8.97934631e+02, 5.95270630e+02,
        8.31303284e+02, 6.89848999e+02, 4.55709442e+02, 1.01676038e+03,
        4.10918823e+02, 1.10982471e+03, 1.52223846e+02, 3.81893097e+02,
        2.28764892e+00, 1.13649117e+02, 6.60444458e+02, 5.13037415e+02,
        1.00981880e+02, 3.86919403e+02, 5.55353027e+02, 1.06292004e+03],
       [0.00000000e+00, 1.46780640e+03, 1.66270715e+03, 1.13469556e+03,
        9.37004517e+02, 1.47690979e+03, 1.20390686e+03, 9.09425903e+02,
        8.29008789e+02, 1.16213623e+03, 8.10535461e+02, 7.39536377e+02,
        8.54720947e+02, 6.86801514e+02, 9.90098816e+02, 5.88601624e+02,
        9.34431946e+02, 7.85760376e+02, 4.45809540e+02, 1.12760120e+03,
        4.53330536e+02, 1.22382410e+03, 1.31101685e+02, 5.00327576e+02,
        1.17909706e+02, 6.19097471e+00, 7.79999695e+02, 6.31974243e+02,
        9.29365845e+01, 5.04755005e+02, 6.71016724e+02, 1.18016931e+03],
       [0.00000000e+00, 1.88771155e+03, 1.52753394e+03, 1.86913623e+03,
        1.55783728e+03, 1.10376685e+03, 1.14948535e+03, 1.33800952e+03,
        1.55272925e+03, 1.01350519e+03, 1.25568030e+03, 1.44792957e+03,
        1.16069250e+03, 1.29491309e+03, 9.09815369e+02, 1.39532166e+03,
        7.56544312e+02, 8.39953857e+02, 1.32064014e+03, 6.43386597e+02,
        1.13555957e+03, 5.86656311e+02, 1.17843274e+03, 7.25189392e+02,
        1.06533191e+03, 1.17488513e+03, 4.21107697e+02, 5.53988037e+02,
        1.11582483e+03, 6.76834778e+02, 5.11618042e+02, 2.81864357e+00]],
      dtype=float32)
#+end_example

<<ac5e570c-c874-401b-9d16-5a0b4c554e19>>
This matrix can be thresholded to count the number of positive objects
which are in a given radius of objects in the other channel. Therefore,
we fix a threshold taking the pixel size into account.

<<4b0f756c-65a4-45a4-b7bd-0fe1135c01b2>>
#+begin_src python
maximum_distance_in_micron = 5
maximum_distnace_in_pixels = maximum_distance_in_micron / pixel_size_xy_in_micron
maximum_distnace_in_pixels
#+end_src

#+begin_example
15.625
#+end_example

<<97ffc643-9128-4067-afcf-1134b8db92bc>>
#+begin_src python
binary_neighbor_count_matrix = distance_matrix < maximum_distnace_in_pixels

# we do not want to count background as a close-by object
cle.set_column(binary_neighbor_count_matrix, 0, 0)
cle.set_row(binary_neighbor_count_matrix, 0, 0)

binary_neighbor_count_matrix
#+end_src

#+begin_example
cl.OCLArray([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1]], dtype=uint8)
#+end_example

<<5ba4709e-1fca-4cb7-b75c-6a751fb79f3d>>
** Counting neighbors
   :PROPERTIES:
   :CUSTOM_ID: counting-neighbors
   :END:
We can now count for each cy3-positive nucleus the number of objects
that are also egfp-positive by projecting this matrix in y:

<<8bd400a1-2a77-41a9-84a6-6203b2c82d40>>
#+begin_src python
positive_cy3_double_positive = np.asarray(cle.maximum_y_projection(binary_neighbor_count_matrix))[0, 1:]
# [0, 1:] is necessary to get rid of the first column which corresponds to background
positive_cy3_double_positive
#+end_src

#+begin_example
array([1., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1.],
      dtype=float32)
#+end_example

<<93a070fe-f288-455a-9aca-4ad4ae59028c>>
There are that many cy3 positives that are also egfp positive:

<<67d3b769-e644-4031-a28b-bf87664d8501>>
#+begin_src python
positive_cy3_double_positive.sum()
#+end_src

#+begin_example
23.0
#+end_example

<<79f6e96d-1474-45af-8e02-ee71df3e498c>>
There are that many cy3 positives that are egfp negative

<<bf7130f6-1cc0-4ba0-a02f-3ddb28dea204>>
#+begin_src python
(positive_cy3_double_positive == 0).sum()
#+end_src

#+begin_example
8
#+end_example

<<706956f7-b4ba-4b8e-ba2f-ea98d7dd17e1>>
Analogously, we can count the egfp positives that are also cy3 positive
using a maximum-projection in x:

<<d5b5fb2e-119a-4629-9c42-de94f2f758a9>>
#+begin_src python
positive_egfp_double_positive = np.asarray(cle.maximum_x_projection(binary_neighbor_count_matrix))[1:,0]
# [1:, 0] is necessary to get rid of the first column which corresponds to background
positive_egfp_double_positive
#+end_src

#+begin_example
array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
       1., 1., 1., 1., 1., 1.], dtype=float32)
#+end_example

<<1259b743-fd01-4d34-9f94-411f9315b06e>>
There are that many egfp positives that are also cy3 positive:

<<a1979c51-7755-4514-91bc-db3abaa3e0e1>>
#+begin_src python
positive_egfp_double_positive.sum()
#+end_src

#+begin_example
23.0
#+end_example

<<4f870655-e03f-4c04-8554-220e04844ad1>>
And there are that many egfp positives that are cy3 negative:

<<a2e0b9e4-4ef4-4e38-83c7-c0758e40d10e>>
#+begin_src python
(positive_egfp_double_positive == 0).sum()
#+end_src

#+begin_example
0
#+end_example

<<6ca4bee3-ff65-4b8e-8563-abba79bc1045>>
#+begin_src python
#+end_src
