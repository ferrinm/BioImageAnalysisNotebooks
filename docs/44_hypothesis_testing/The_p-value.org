* Plotting the p-value depending on a given normal distribution
  :PROPERTIES:
  :CUSTOM_ID: plotting-the-p-value-depending-on-a-given-normal-distribution
  :END:

#+begin_src python
import numpy as np
from numpy import random
import matplotlib.pyplot as plt
#+end_src

#+begin_src python
def make_random_distribution(given_mean, given_standard_deviation, number_of_samples):
    x = random.normal(loc=7, scale=given_standard_deviation, size=number_of_samples)
    
    return x
#+end_src

#+begin_src python
from scipy import stats
def test_if_mean_is(x, value):
    statistics, pvalue = stats.ttest_1samp(x, value)
    return [statistics, pvalue]
    
#+end_src

#+begin_src python
def make_random_distribution_and_plot_pvalue(number_of_samples):
    given_mean = 7
    given_standard_deviation = 1
    x = make_random_distribution(given_mean, given_standard_deviation, number_of_samples)
    range = np.arange(4, 10, 0.25)
    p_values = []
    t_stats_arr = []
    for value in range:
        t_stats, p_value = test_if_mean_is(x, value)
        p_values = p_values + [p_value]
        t_stats_arr = t_stats_arr + [t_stats]


    fig, ax = plt.subplots()
    ax.hist(x, bins=10, range=(4,10))
    ax.set_title('Normal distribution of ' + str(number_of_samples) + ' samples')
    ax.set_ylabel("count")
    ax.set_xlabel("Sample value")
    plt.show()

    fig, ax = plt.subplots()
    ax.plot(range, p_values)
    ax.set_title('p-value with respect to normal distibution of ' + str(number_of_samples) + ' samples')
    ax.set_ylabel("p-values")
    ax.set_xlabel("Suspected mean")
    plt.show()

    fig, ax = plt.subplots()
    ax.plot(range, t_stats_arr)
    ax.set_ylabel("t-stats")
    ax.set_xlabel("Suspected mean")
    plt.show()
#+end_src

#+begin_src python
for number_of_samples in [2, 5, 10, 20, 100, 1000, 10000, 100000]:
    make_random_distribution_and_plot_pvalue(number_of_samples)
#+end_src

[[file:375cb008c15f259732e415586d0dbf27a76c33c6.png]]

[[file:007317aeecb1fb306a213055322c9e10142d3cbe.png]]

[[file:9fa7e1fc25a13b4810161e24c8adc4aa3d543f59.png]]

[[file:44bedce6818c4f4adc48dc089aa18689e5dd0601.png]]

[[file:d55cd3dbbe61474224623e03c944a9878b0eb011.png]]

[[file:65a845f80124ca398d3635f87fab2ffc6e2a57d7.png]]

[[file:93af94acd7293af9a0db95ac0a3ff2bd20ed719b.png]]

[[file:1c79b09e912d3dcd87ddca3dce1a6d214d0e73d6.png]]

[[file:7fc5ec2a87aefa05170d265b1b0ea34546d9e4b5.png]]

[[file:8b1303b028e39a5312e12177149e63ef2f5ea381.png]]

[[file:b73918c854ecfa7d87e9170233a0bcc979d84d3d.png]]

[[file:18c92878ef3c8a7176d2a7546beb1c67cfb5fc72.png]]

[[file:c50edbc273519c0bff9491f9c77d6720413691d8.png]]

[[file:662da83dc7299cea7d2ea461d2dd211ca7c5ce6a.png]]

[[file:b1e67fcd71f7a9c102d4a14fccc5f8c04e060b05.png]]

[[file:81f758c3861e8d2739d7dc22ec25844ec34fd968.png]]

[[file:72596dde7e4f06b39372d3825b09309e80af4da5.png]]

[[file:d7f2d4ce4bb6af6696a8b1dd65938ecf9b4c281e.png]]

[[file:9f0fd4b0304f1abd50586d904691962685975b0e.png]]

[[file:4f46c86aa7e86ccecba3939737159014c57fc4fa.png]]

[[file:426dddf2fa7fab3f62dce74696c7ee98ae80e1ad.png]]

[[file:6e321beaac0bc6a7e032110424d79ad2caf71014.png]]

[[file:0d40391e652912456fddbff74409432c9874c992.png]]

[[file:86fdf0354b024a3c19e996529c79401b8b248386.png]]

#+begin_src python
#+end_src

#+begin_src python
#+end_src
