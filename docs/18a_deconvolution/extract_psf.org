<<c608bb42-2272-4d3f-a5a8-3f61ac4906a2>>
(deconvolution:extract_psf)=

* Determining the point-spread-function from a bead image by averaging
  :PROPERTIES:
  :CUSTOM_ID: determining-the-point-spread-function-from-a-bead-image-by-averaging
  :END:
In order to deconvolve a microsocpy image properly, we should determine
the point-spread-function (PSF) of the microscope.

See also

- [[https://github.com/True-North-Intelligent-Algorithms/tnia-python/blob/main/notebooks/Deconvolution/extract_psf-Haase-beads.ipynb][PSF
  destilling by Brian Northan]]

<<a922962c-dd91-47d5-8caa-1006715a595c>>
#+begin_src python
import numpy as np
from skimage.io import imread, imsave
from pyclesperanto_prototype import imshow
import pyclesperanto_prototype as cle
import pandas as pd
import matplotlib.pyplot as plt
#+end_src

<<2226b905-e927-4103-8abf-5a75bba75456>>
The example image data used here was acquired by Bert Nitzsche and
Robert Haase (both MPI-CBG at that time) at the Light Microscopy
Facility of MPI-CBG. Just for completeness, the voxel size is
0.022x0.022x0.125 Âµm^3.

<<a20c8b42-c663-40f2-a368-eb4cdf7673f7>>
#+begin_src python
bead_image = imread('../../data/Bead_Image1_crop.tif')
bead_image.shape
#+end_src

#+begin_example
(41, 150, 150)
#+end_example

<<6ac8eba5-30fc-4d1a-b664-d54004b82a4d>>
Our example image shows fluorescent beads, ideally with a diameter
smaller than the resolution of the imaging setup. Furthermore, the beads
should emit light in the same wavelength as the sample we would like to
deconvolve later on. In the following image crop we see four fluorescent
beads. It is recommended to image a larger field of view, with at least
25 beads. Also make sure that the beads do not stick to each other and
are sparsely distributed.

<<108046a1-17d9-4099-97cc-79b220e76eff>>
#+begin_src python
imshow(cle.maximum_x_projection(bead_image), colorbar=True)
imshow(cle.maximum_y_projection(bead_image), colorbar=True)
imshow(cle.maximum_z_projection(bead_image), colorbar=True)
#+end_src

[[file:73313d9e57d5507cf3fb1614c318c1ff0ae132f8.png]]

[[file:27f3a57af2321b86b1b649a5d17f26936a692163.png]]

[[file:75b84ddb11bae558be86c4a2cc603e11468e7003.png]]

<<b68d86ac-938c-4162-838a-27839d78d47e>>
For determining an average PSF, technically we can crop out all the
individual beads, align them and then average the images. Therefore, we
segment the objects and determine their center of mass.

<<e268a872-a5cc-4033-b4f5-c3cc3a8ba2f1>>
#+begin_src python
# Segment objects
label_image = cle.voronoi_otsu_labeling(bead_image)
imshow(label_image, labels=True)
#+end_src

[[file:03b870f7eb062bbbd8cc478e0085feaef1f70ede.png]]

<<1c6a6a41-c7ed-4696-853b-3b2367ae2aa8>>
#+begin_src python
# determine center of mass for each object
stats = cle.statistics_of_labelled_pixels(bead_image, label_image)

df = pd.DataFrame(stats)
df[["mass_center_x", "mass_center_y", "mass_center_z"]]
#+end_src

#+begin_example
   mass_center_x  mass_center_y  mass_center_z
0      30.107895      73.028938      23.327475
1      44.293156     111.633430      23.329062
2      76.092850      82.453033      23.299677
3     125.439606      35.972496      23.390951
#+end_example

<<002b56ec-101e-48f6-9179-4d15a0a3f531>>
** PSF averaging
   :PROPERTIES:
   :CUSTOM_ID: psf-averaging
   :END:
Next, we will iterate over the beads and crop them out by translating
them into a smaller PSF image.

<<6eb22552-6270-4592-871c-370c3d3d738b>>
#+begin_src python
# configure size of future PSF image
psf_radius = 20
size = psf_radius * 2 + 1

# initialize PSF
single_psf_image = cle.create([size, size, size])
avg_psf_image = cle.create([size, size, size])

num_psfs = len(df)
for index, row in df.iterrows():
    x = row["mass_center_x"]
    y = row["mass_center_y"]
    z = row["mass_center_z"]
    
    print("Bead", index, "at position", x, y, z)
    
    # move PSF in right position in a smaller image
    cle.translate(bead_image, single_psf_image, 
                  translate_x= -x + psf_radius,
                  translate_y= -y + psf_radius,
                  translate_z= -z + psf_radius)

    # visualize
    fig, axs = plt.subplots(1,3)    
    imshow(cle.maximum_x_projection(single_psf_image), plot=axs[0])
    imshow(cle.maximum_y_projection(single_psf_image), plot=axs[1])
    imshow(cle.maximum_z_projection(single_psf_image), plot=axs[2])
    
    # average
    avg_psf_image = avg_psf_image + single_psf_image / num_psfs
#+end_src

#+begin_example
Bead 0 at position 30.107894897460938 73.02893829345703 23.32747459411621
Bead 1 at position 44.293155670166016 111.63343048095703 23.32906150817871
Bead 2 at position 76.09284973144531 82.45303344726562 23.2996768951416
Bead 3 at position 125.43960571289062 35.972496032714844 23.39095115661621
#+end_example

[[file:0fc6a7cb966c5d7fe6abf20b01ebbdbe60a0c23a.png]]

[[file:e4710b47804990b58068bed5ae37647bc33d1315.png]]

[[file:76eee03779b0d1417749f5555782cbcd3a6cc37b.png]]

[[file:69d5fdaf14c6d20c7eb1c8c1c22e9934b19d7fc4.png]]

<<1039a3da-a945-40d4-9a5e-60749abf856a>>
The average PSF then looks like this:

<<31be5bf1-326b-4df8-8625-0d6509bd1bca>>
#+begin_src python
fig, axs = plt.subplots(1,3)    
imshow(cle.maximum_x_projection(avg_psf_image), plot=axs[0])
imshow(cle.maximum_y_projection(avg_psf_image), plot=axs[1])
imshow(cle.maximum_z_projection(avg_psf_image), plot=axs[2])
#+end_src

[[file:27dfce3ca3e909d8ba89cc16b9070a82639a3de1.png]]

<<9d433365-8679-464b-a8bb-6362c3138b76>>
#+begin_src python
avg_psf_image.min(), avg_psf_image.max()
#+end_src

#+begin_example
(0.0, 94.5)
#+end_example

<<5f778610-70d5-425c-be62-71a4bcda35f6>>
After we determined a well centered PSF, we can save it for later
re-use. Before doing that, we normalize the PSF. Goal is to have an
image where the total intensity is =1=. This makes sure that an image
that is deconvolved using this PSF later on does not modify the image's
intensity range.

<<27d9d992-45f3-4a3d-b407-305040a05fc6>>
#+begin_src python
normalized_psf = avg_psf_image / np.sum(avg_psf_image)

imshow(normalized_psf, colorbar=True)
#+end_src

[[file:2273d58b935299c71d399dde14455e3785ae9abd.png]]

<<6d77b156-8ebf-4ff9-a167-8774f5383bfc>>
#+begin_src python
normalized_psf.min(), normalized_psf.max()
#+end_src

#+begin_example
(0.0, 0.0006259646)
#+end_example

<<5a2c08fa-36e1-4630-b66b-91d31e3a68f1>>
#+begin_src python
imsave('../../data/psf.tif', normalized_psf)
#+end_src

#+begin_example
C:\Users\rober\AppData\Local\Temp\ipykernel_16716\3265681491.py:1: UserWarning: ../../data/psf.tif is a low contrast image
  imsave('../../data/psf.tif', normalized_psf)
#+end_example

<<7ec189d1-bdfe-44d0-ac6e-ff9cad6b5472>>
#+begin_src python
#+end_src
