<<c67dbc8f-feb8-4624-a15c-607110335ba9>>
** Generating code for processing images
   :PROPERTIES:
   :CUSTOM_ID: generating-code-for-processing-images
   :END:
In case chatGPT's knowledge base contains solutions for tasks we ask
for, such as image analysis tasks, it can create quite sophisticated
image analysis scripts.

We define a helper function for making prompts first.

<<518133ff-0959-42ac-a184-f2f464959b47>>
#+begin_src python
import openai
import matplotlib.pyplot as plt

def prompt(message:str, model="gpt-3.5-turbo"):
    """A prompt helper function that sends a message to openAI
    and returns only the text response.
    """
    client = openai.OpenAI()
    response = client.chat.completions.create(
        model=model,
        messages=[{"role": "user", "content": message}]
    )
    return response.choices[0].message.content
#+end_src

<<7ca10c71-b1f2-4e88-8953-173dc25f6fef>>
A /simple/ task could be described like in the following. We explictly
specify that this should execute from Jupyter to prevent windows popping
up.

<<eb9dbef3-51b1-4327-8d59-892105f33b5c>>
#+begin_src python
simple_question = """
Write Python code only and no additional explanatory text.

Write a python program, that 
* loads the file `../../data/blobs.tif`,
* labels objects in this image, and
* visualize results.

Assume this program would be executed in a Jupyter notebook.
It is not necessary to save the results. Show the results in Jupyter.
"""
#+end_src

<<e2149659-ce57-4133-b2b8-954f04966dac>>
The generated code looks like this.

<<5c0ff948-5400-4d21-aa98-8f46c3ac80da>>
#+begin_src python
code = prompt(simple_question)
print(code)
#+end_src

#+begin_example
```python
import matplotlib.pyplot as plt
from skimage.io import imread
from skimage.feature import peak_local_max
from skimage.filters import threshold_otsu
from skimage.measure import label
from skimage.segmentation import mark_boundaries

# Load the image
image = imread('../../data/blobs.tif')

# Threshold the image
thresh = threshold_otsu(image)
binary = image > thresh

# Label the objects
labeled_image, num_labels = label(binary, connectivity=2, return_num=True)

# Find object centroids
centroids = peak_local_max(image, labels=labeled_image, min_distance=10)

# Visualize results
fig, ax = plt.subplots(figsize=(10, 10))
ax.imshow(mark_boundaries(image, labeled_image, color=(1, 0, 0)))
ax.plot(centroids[:, 1], centroids[:, 0], 'b+', markersize=10)
ax.set_axis_off()
plt.show()
```
#+end_example

<<29e565d6-f950-47dc-9d5d-8745f6d9a4f2>>
This code needs a little cleaning, before we can execute it.

<<f0c9d6fb-7292-4557-bf8e-83f460b7cfdc>>
#+begin_src python
cleaner_code = code.replace("```python", "").replace("```", "")
#+end_src

<<5132aebf-1e5e-4db9-ad91-fa7cd304f2ad>>
We now excute the code. Note in more advanced scenarios there is a risk
when executing generated code. We could delete files unintentionally for
example.

<<e7c341a6-1306-4fcd-bc01-865f2749c9af>>
#+begin_src python
exec(cleaner_code)
#+end_src

[[file:3b2abe8d059b78970baa6abbe81aae8cf82a9b7b.png]]

<<fafe13c5-b7e2-459b-903e-13293ac9f310>>
** Exercises
   :PROPERTIES:
   :CUSTOM_ID: exercises
   :END:
- Rerun the code above. Is the output the same? If not, why?
- Modify the code above so that the output of the script is the number
  of blobs in the image.

<<d8156511-7f72-4d7f-9578-3628d75ebf72>>
#+begin_src python
#+end_src
