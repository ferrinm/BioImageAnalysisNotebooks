<<8e9e7c85-62ea-4d80-9989-1b7517916140>>
** Prompting tasks using LangChain
   :PROPERTIES:
   :CUSTOM_ID: prompting-tasks-using-langchain
   :END:
In this notebook we demonstrate how to prompt for executing tasks using
chatGPT and [[https://github.com/hwchase17/langchain][LangChain]]. Using
English language, we ask for doing something with data, and LangChain
will execute the task.

<<f4ae3a80-b6ea-4409-95b7-caecd4e4211c>>
#+begin_src python
from langchain.tools import tool
from langchain.memory import ConversationBufferMemory
from langchain.chat_models import ChatOpenAI
from langchain.utilities import SerpAPIWrapper
from langchain.agents import initialize_agent
from langchain.agents import AgentType
#+end_src

<<6b78c8e5-58d1-4750-b659-e639a2b99d2f>>
To demonstrate how this works, we define three functions that modify a
string and collect them in a list called =tools=.

<<1299e632-1c54-467e-852a-26d497cd1d8d>>
#+begin_src python
tools = []
#+end_src

<<c52e83ba-48ce-40ea-85a3-31539c72e8f7>>
#+begin_src python
@tools.append
@tool
def upper_case(text:str):
    """Useful for making a text uppercase or capital letters."""
    return text.upper()

@tools.append
@tool
def lower_case(text:str):
    """Useful for making a text lowercase or small letters."""
    return text.lower()

@tools.append
@tool
def reverse(text:str):
    """Useful for making reversing order of a text."""
    return text[::-1]
#+end_src

<<c0524eb1-7633-45e7-982b-1c2cc5af0b16>>
We create some memory and a large language model based on OpenAI's
chatGPT.

<<5d032bf0-49d1-42d4-9654-394a9e660996>>
#+begin_src python
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

llm=ChatOpenAI(temperature=0)
#+end_src

<<7bda4152-8cd8-4257-8e7a-e31fca49ffad>>
Given the list of tools, the large language model and the memory, we can
create an agent.

<<28afdf8e-87f2-44a7-9f8d-ef188e0f13b5>>
#+begin_src python
agent = initialize_agent(
    tools, 
    llm, 
    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION, 
    memory=memory,
    handle_parsing_errors=True
)
#+end_src

<<23e3065d-8d55-46dc-b160-ff4349ee3beb>>
This agent can then respond to prompts.

<<5bf8d165-de48-4052-8121-d0bedac8a3e2>>
#+begin_src python
agent.run("Hi, I am Robert")
#+end_src

#+begin_example
'Nice to meet you, Robert! How can I assist you today?'
#+end_example

<<d8afb239-93e9-4773-bcc2-37b2fda2a81b>>
As it has memory, it can remind information we gave it earlier.

<<1989ffdb-afe9-4d65-bdad-3ef25aadddd3>>
#+begin_src python
agent.run("What's my name?")
#+end_src

#+begin_example
'Your name is Robert.'
#+end_example

<<752ff4fc-fc27-4360-b46f-e6aa89b376b6>>
And we can use English language to apply one of the functions above.

<<009a4a17-578a-47ff-8ddd-999cfe49c3a3>>
#+begin_src python
agent.run("Can you reverse my name?")
#+end_src

#+begin_example
'treboR'
#+end_example

<<1c5f825b-515a-435e-a7bb-ea22cba53afd>>
Multiple tasks can also be chained.

<<58833309-6ea3-4d83-9471-87f83d945f2a>>
#+begin_src python
agent.run("Do you know my name reversed and upper case?")
#+end_src

#+begin_example
'TREBOR'
#+end_example

<<1259eee2-b5f7-487c-b200-cf5c472838d7>>
** Exercise
   :PROPERTIES:
   :CUSTOM_ID: exercise
   :END:
Add a =print('Hello world')= to the function =reverse=, rerun the entire
notebook and execue the last cell above multiple times. Is the
=Hello world= printed every time? If not, why?

<<3a78de42-7960-43f0-a62b-98106e57e75a>>
#+begin_src python
#+end_src
