* Label neighbor filters
  :PROPERTIES:
  :CUSTOM_ID: label-neighbor-filters
  :END:
In this notebook, we demonstrate how neighbor-based filters work in the
contexts of measurements of cells in tissues. We also determine neighbor
of neighbors and extend the radius of such filters.

See also

- [[https://www.frontiersin.org/articles/10.3389/fcomp.2021.774396/][Image
  Processing Filters for Grids of Cells Analogous to Filters Processing
  Grids of Pixels]]

#+begin_src python
import pyclesperanto_prototype as cle
import numpy as np
import matplotlib
from numpy.random import random

cle.select_device("RTX")
#+end_src

#+begin_example
<Apple M1 Max on Platform: Apple (2 refs)>
#+end_example

#+begin_src python
# Generate artificial cells as test data
tissue = cle.artificial_tissue_2d()
touch_matrix = cle.generate_touch_matrix(tissue)

cle.imshow(tissue, labels=True)
#+end_src

[[file:b502506dc56ac05309898b462d03f41998380440.png]]

* Associate artificial measurements to the cells
  :PROPERTIES:
  :CUSTOM_ID: associate-artificial-measurements-to-the-cells
  :END:

#+begin_src python
centroids = cle.label_centroids_to_pointlist(tissue)

coordinates = cle.pull_zyx(centroids)
values = random([coordinates.shape[1]])

for i, y in enumerate(coordinates[1]):
    if (y < 128):
        values[i] = values[i] * 10 + 45
    else:
        values[i] = values[i] * 10 + 90

measurements = cle.push_zyx(np.asarray([values]))

# visualize measurments in space
parametric_image = cle.replace_intensities(tissue, measurements)
cle.imshow(parametric_image, min_display_intensity=0, max_display_intensity=100, color_map='jet')
#+end_src

[[file:28f0f8a47cbb192042251e6926836db6f18cc474.png]]

* Local averaging smoothes edges
  :PROPERTIES:
  :CUSTOM_ID: local-averaging-smoothes-edges
  :END:
By averaging measurments locally, we can reduce the noise, but we also
introduce a stripe where the region touch

#+begin_src python
local_mean_measurements = cle.mean_of_touching_neighbors(measurements, touch_matrix)

parametric_image = cle.replace_intensities(tissue, local_mean_measurements)
cle.imshow(parametric_image, min_display_intensity=0, max_display_intensity=100, color_map='jet')
#+end_src

[[file:2a824f5714c40ab4b0ed4bc045489faa634911ed.png]]

* Edge preserving filters: median
  :PROPERTIES:
  :CUSTOM_ID: edge-preserving-filters-median
  :END:
By averaging using a median filter, we can also reduce noise while
keeping the edge between the regions sharp

#+begin_src python
local_median_measurements = cle.median_of_touching_neighbors(measurements, touch_matrix)

parametric_image = cle.replace_intensities(tissue, local_median_measurements)
cle.imshow(parametric_image, min_display_intensity=0, max_display_intensity=100, color_map='jet')
#+end_src

[[file:4d41697c8c7dda4e8325a57c0f4b5657d87c6627.png]]

* Increasing filter radius: neighbors of neighbors
  :PROPERTIES:
  :CUSTOM_ID: increasing-filter-radius-neighbors-of-neighbors
  :END:
In order to increase the radius of the operation, we need to determin
neighbors of touching neighbors

#+begin_src python
neighbor_matrix = cle.neighbors_of_neighbors(touch_matrix)

local_median_measurements = cle.median_of_touching_neighbors(measurements, neighbor_matrix)

parametric_image = cle.replace_intensities(tissue, local_median_measurements)
cle.imshow(parametric_image, min_display_intensity=0, max_display_intensity=100, color_map='jet')
#+end_src

[[file:92618d109552e570626483063272455f18b70b78.png]]

** Short-cuts for visualisation only
   :PROPERTIES:
   :CUSTOM_ID: short-cuts-for-visualisation-only
   :END:
If you're not so much interested in the vectors of measurements, there
are shortcuts: For example for visualizing the mean value of neighboring
pixels with different radii:

#+begin_src python
# visualize measurments in space
measurement_image = cle.replace_intensities(tissue, measurements)
print('original')
cle.imshow(measurement_image, min_display_intensity=0, max_display_intensity=100, color_map='jet')

for radius in range(0, 5):
    print('Radius', radius)
    # note: this function takes a parametric image the label map instead of a vector and the touch_matrix used above
    parametric_image = cle.mean_of_touching_neighbors_map(measurement_image, tissue, radius=radius)
    cle.imshow(parametric_image, min_display_intensity=0, max_display_intensity=100, color_map='jet')
#+end_src

#+begin_example
original
#+end_example

[[file:28f0f8a47cbb192042251e6926836db6f18cc474.png]]

#+begin_example
Radius 0
#+end_example

[[file:28f0f8a47cbb192042251e6926836db6f18cc474.png]]

#+begin_example
Radius 1
#+end_example

[[file:24db57e3cacd5e0fec87f9a3d45f1a4629b236c9.png]]

#+begin_example
Radius 2
#+end_example

[[file:0a1b852b330ed5a7802087b3c5f3f2065f301064.png]]

#+begin_example
Radius 3
#+end_example

[[file:f7dc9081d1f04b49dd4eea574e4cc92137fa85e9.png]]

#+begin_example
Radius 4
#+end_example

[[file:997c1b531ca28b9ea1f2c8758c3e9f876f42b837.png]]

#+begin_src python
#+end_src
