<<173fa6b4-879e-4b8c-8916-1ce96729f296>>
* Neighbor meshes in three dimensions
  :PROPERTIES:
  :CUSTOM_ID: neighbor-meshes-in-three-dimensions
  :END:
The neighbor meshes we worked with in this chapter in general also work
in three dimensions. It is just more challenging to visualize those.

<<65ac2dee-b7f4-46e8-8f4a-f23336d54737>>
#+begin_src python
from skimage.io import imread
import pyclesperanto_prototype as cle
import matplotlib.pyplot as plt
#+end_src

<<37b9369c-568d-4483-8e22-5764b0506cc4>>
The image data we use here shows a crop of a developing Tribolium
castaneum embryo imaged using light sheet microscopy by Daniela Vorkel,
Myers lab, MPI-CBG / CSBD Dresden.

<<6311571e-6c95-4020-a7e9-ae1b59d25446>>
#+begin_src python
raw_image = imread("../../data/Lund_000500_resampled-cropped.tif")

raw_image.shape
#+end_src

#+begin_example
(100, 256, 256)
#+end_example

<<f412f277-7245-4bde-87ee-0a0c28f0d586>>
For the ease-of-use we write a short function for visualizing our image
stack in three maximum projections from different persepctives.

<<bdd9aa4d-a301-4d82-8f6a-aa3da7b42410>>
#+begin_src python
def orthogonal_show(image, labels=False):

    fig, axs = plt.subplots(1, 3, figsize=(15, 7))

    cle.imshow(cle.maximum_x_projection(image), plot=axs[0], labels=labels)
    cle.imshow(cle.maximum_y_projection(image), plot=axs[1], labels=labels)
    cle.imshow(cle.maximum_z_projection(image), plot=axs[2], labels=labels)
    
    axs[0].set_title("Maximum intensity along X")
    axs[1].set_title("Maximum intensity along Y")
    axs[2].set_title("Maximum intensity along Z")

orthogonal_show(raw_image)
#+end_src

[[file:dd642e00fbb78bfda8d41296b5efc8c144657108.png]]

<<481d99ce-7864-491e-bfc8-110b0e5768ee>>
We can now segment nuclei in our our dataset.

<<ee8663ca-cd37-4a2d-8825-2aa363925711>>
#+begin_src python
background_subtracted = cle.top_hat_box(raw_image, radius_x=5, radius_y=5, radius_z=5)

nuclei = cle.voronoi_otsu_labeling(background_subtracted)

orthogonal_show(nuclei, labels=True)
#+end_src

[[file:72e7d2a83d2294a7ae345e607240b061749be645.png]]

<<899bbd04-ec6f-4327-be60-2f262352ccc6>>
After segmentation, we expand the labels a bit so they touch.

<<cfdfb298-5974-4399-b911-02924c9cace4>>
#+begin_src python
expanded_nuclei = cle.dilate_labels(nuclei, radius=4)

orthogonal_show(expanded_nuclei, labels=True)
#+end_src

[[file:56719c4fbff5675ac1cc766d0ce4d7c591e12a48.png]]

<<f567b6df-e670-477c-9406-7091309a0a6e>>
And then, we can visualize a (centroid) distance mesh between touching
neighbors.

<<459399eb-49af-4950-a704-e2813d6173dc>>
#+begin_src python
mesh = cle.draw_distance_mesh_between_touching_labels(expanded_nuclei)

orthogonal_show(mesh)
#+end_src

[[file:e9863f3ad26c5d8e95434126b2b0097574edf287.png]]

<<20ae0d99-220b-492e-a5e8-849d5a3a69c3>>
#+begin_src python
#+end_src
