<<10e47cc1-499d-492b-8eab-e28c7b56f376>>
* Visualizing relationships between feature spaces
  :PROPERTIES:
  :CUSTOM_ID: visualizing-relationships-between-feature-spaces
  :END:
When analyzing feature measurements and dimensionality reduction
results, e.g. involving a UMAP, one often switches between those spaces.
In this notebook we demonstrate how one can interpolated between these
spaces.

<<ec144f98-b506-4ea5-8b1f-1f68edfda95e>>
#+begin_src python
import pandas as pd
import seaborn as sns
#+end_src

<<110586a2-9245-4b55-83f0-75ae07680f6c>>
First, we load a pandas dataframe of a .csv file containing some
measurements, two UMAP columns and a manual selection of some data
points.

<<b08e18c9-5678-4d0e-a4c0-5fab35ff5a54>>
#+begin_src python
df = pd.read_csv('../../data/blobs_statistics_with_umap.csv')

df.head()
#+end_src

#+begin_example
   Unnamed: 0  area  mean_intensity  minor_axis_length  major_axis_length  \
0           0   422      192.379147          16.488550          34.566789   
1           1   182      180.131868          11.736074          20.802697   
2           2   661      205.216339          28.409502          30.208433   
3           3   437      216.585812          23.143996          24.606130   
4           4   476      212.302521          19.852882          31.075106   

   eccentricity    extent  feret_diameter_max  equivalent_diameter_area  \
0      0.878900  0.586111           35.227830                 23.179885   
1      0.825665  0.787879           21.377558                 15.222667   
2      0.339934  0.874339           32.756679                 29.010538   
3      0.339576  0.826087           26.925824                 23.588253   
4      0.769317  0.863884           31.384710                 24.618327   

   bbox-0  bbox-1  bbox-2  bbox-3     UMAP1     UMAP2  selection  
0       0      11      30      35  7.685868  3.738014      False  
1       0      53      11      74  8.768059  7.172123       True  
2       0      95      28     122  6.129949  3.477662      False  
3       0     144      23     167  5.410176  4.095456      False  
4       0     237      29     256  5.280250  3.861278      False  
#+end_example

<<d1c0cc9c-aa97-42bd-8092-4d813b3d72f2>>
We then visualize the two UMAP columns and two other columns of features
of interest.

<<c161f9ff-3ba4-433e-be68-28e96e31a61e>>
#+begin_src python
sns.scatterplot(data=df, x='UMAP1', y='UMAP2', hue='selection')
#+end_src

#+begin_example
<Axes: xlabel='UMAP1', ylabel='UMAP2'>
#+end_example

[[file:d3992058305cb0eca06220939aeee2bebbe0845d.png]]

<<8afa143c-d333-4db3-a1ee-d490387d3964>>
#+begin_src python
sns.scatterplot(data=df, x='area', y='feret_diameter_max', hue='selection')
#+end_src

#+begin_example
<Axes: xlabel='area', ylabel='feret_diameter_max'>
#+end_example

[[file:da7c5038bea29b899f1184a3d6d793768cbedbdb.png]]

<<4b59df96-34a0-49d3-bb9a-f3175ab03989>>
** Interpolating between feature spaces
   :PROPERTIES:
   :CUSTOM_ID: interpolating-between-feature-spaces
   :END:
Drawing an animation of plots that are interpolated between the two
plots above can be done using Python. As the procedure is a bit
complicated, we asked a language model to write this code for us. Manual
adaption of the code was done to make the video play back-and-forth and
to modify frame delay. Hence, only the last code line was written by a
human.

<<67853ee1-3eee-4fd9-a673-4ed327877d7f>>
#+begin_src python
from bia_bob import bob
bob.initialize(model="gpt-4o-2024-08-06", vision_model="gpt-4o-2024-08-06")
#+end_src

#+begin_example
<IPython.core.display.HTML object>
#+end_example

<<ed8ab092-8e76-42e6-b64e-d887997a71be>>

<<9613aea8-06b8-4bef-95fd-3e73f11309cc>>
#+begin_src python
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from io import BytesIO
from skimage.io import imread
import matplotlib.pyplot as plt
import stackview

# Normalize dataframe columns to range between 0 and 1
scaler = MinMaxScaler()
df_normalized = df.copy()
df_normalized[df_normalized.columns] = scaler.fit_transform(df_normalized[df_normalized.columns])

# Create initial plots
fig, ax = plt.subplots(figsize=(8, 6))

# Storage for images
plot_images = []

# Interpolate and generate plots
for i in np.linspace(0, 1, 12): # 12 steps including 0 and 1
    ax.clear()
    x_col = (1 - i) * df_normalized['area'] + i * df_normalized['UMAP1']
    y_col = (1 - i) * df_normalized['feret_diameter_max'] + i * df_normalized['UMAP2']
    
    sns.scatterplot(x=x_col, y=y_col, hue=df['selection'], ax=ax)
    ax.set_title(f"Interpolation {i:.1f}")
    
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plot_image = imread(buf)
    plot_images.append(plot_image)

plt.close(fig) 

# Use Stackview to animate the sequence of plots
stackview.animate(np.stack(plot_images + plot_images[::-1]))
#+end_src

#+begin_example
c:\structure\code\stackview\stackview\_animate.py:64: UserWarning: The image is quite large (> 10 MByte) and might not be properly shown in the notebook when rendered over the internet. Consider subsampling or cropping the image for visualization purposes.
  warnings.warn("The image is quite large (> 10 MByte) and might not be properly shown in the notebook when rendered over the internet. Consider subsampling or cropping the image for visualization purposes.")
#+end_example

#+begin_example
<IPython.core.display.HTML object>
#+end_example

<<2fd79f36-0bbb-431a-a17b-8650af768d5b>>
#+begin_src python
#+end_src
