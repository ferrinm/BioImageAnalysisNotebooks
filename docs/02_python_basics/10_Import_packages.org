<<10cc5ddb-417d-43cd-ba12-e4c781850d67>>
* Importing functions and packages
  :PROPERTIES:
  :CUSTOM_ID: importing-functions-and-packages
  :END:
Very often, we need tools that are not directly provided by the default
Python library. In that case we need to import the necessary functions
from modules or packages into our notebooks or scripts. Some modules
come directly with the Python distribution (like the math module seen in
the [[file:Math_in_python.ipynb][Basic math in python]]), and some
others like Numpy, scikit-image etc. are external packages installed
with pip or conda. When it comes to import they work in the same way,
and we have multiple ways of importing single functions or groups of
them.

<<ab468beb-e517-4468-86bb-bf6b8ba96a9f>>
** Basic import
   :PROPERTIES:
   :CUSTOM_ID: basic-import
   :END:
The basic import statment uses the key-words =import= and the module
name. For example with the basic Python module =pathlib= that deals with
file paths and names:

<<d00dce4e-c426-484c-bd41-2905dc99f59c>>
#+begin_src python
import pathlib
#+end_src

<<130dff08-9326-4df4-999f-fb98d1172617>>
If we want to import an external package we need to make sure it is
actually installed, otherwise we get an error message:

<<3d20edb7-7cec-4ea0-a46a-51f7584bf635>>
#+begin_src python
import absent_package
#+end_src

#+begin_example
---------------------------------------------------------------------------
ModuleNotFoundError                       Traceback (most recent call last)
Input In [14], in <cell line: 1>()
----> 1 import absent_package

ModuleNotFoundError: No module named 'absent_package'
#+end_example

<<e8cfed05-6309-4c37-8ee1-a0ab74a70552>>
If you have a missing package, you can install it directly from the
notebook using pip or conda. For example if Numpy is not installed yet
you could execute:

<<6cb89fc2-a2c1-44ca-915c-bfd9f185a368>>
#+begin_src python
conda install -c conda-forge numpy
#+end_src

#+begin_example
Collecting package metadata (current_repodata.json): done
Solving environment: done

# All requested packages already installed.


Note: you may need to restart the kernel to use updated packages.
#+end_example

<<adbad354-b227-41d1-bc97-7b4a386dc8cc>>
** Alternative import formulation
   :PROPERTIES:
   :CUSTOM_ID: alternative-import-formulation
   :END:
Using the simple formulation above, we get access to functions directly
attached to the main package. Let's import the Numpy package that we
will use later to handle image. We can import it:

<<c5374a88-b2cf-4963-b076-616bfaeb6aff>>
#+begin_src python
import numpy
#+end_src

<<caf83b1e-76e7-4a2b-aabb-2180dae9148f>>
and now we get e.g. access to the cosine function of Numpy by simply
using the dot notation:

<<952e16a1-9684-4867-9273-247ad6707eeb>>
#+begin_src python
numpy.cos(3.14)
#+end_src

#+begin_example
-0.9999987317275395
#+end_example

<<f73a553c-1cec-4ad8-a8f9-6601d03e788f>>
To find all functions available in a package or a module, you typically
have to go to its documentation and look for the /Application
Programming Interface/ or /API/. For example here we find a description
of all mathematical functions (including the cosine) of Numpy:
[[https://numpy.org/doc/stable/reference/routines.math.html]]

<<42490a15-3988-4359-a1c6-9a9c588a3c0e>>
*** Name shortening
    :PROPERTIES:
    :CUSTOM_ID: name-shortening
    :END:
If we use a package regularly, we might not want to write the full
package name every time we need a function from it. To avoid that we can
abbreviate it at the time of import using the =as= statement:

<<f3ab4b68-d1a6-4708-aafb-a95c9efee4a8>>
#+begin_src python
import numpy as np
#+end_src

<<b19bb26d-d119-4120-8152-0336c949c069>>
#+begin_src python
np.cos(3.14)
#+end_src

#+begin_example
-0.9999987317275395
#+end_example

<<60f63fce-d4dc-42ff-b4e7-4b168d709bab>>
*** Specific functions
    :PROPERTIES:
    :CUSTOM_ID: specific-functions
    :END:
If we only need a specific function from a package, we can also just
import it using the =from= statement. For examample if we want to only
import the =np.cos= function above:

<<918ca0db-90e9-47b3-9c53-4652049843f1>>
#+begin_src python
from numpy import cos
#+end_src

<<8374d32d-7a48-43cb-ad55-b564f87cc2b4>>
#+begin_src python
cos(3.14)
#+end_src

#+begin_example
-0.9999987317275395
#+end_example

<<23644840-840f-4ecd-b09a-4fee262678ce>>
Of course in this case, unless we find the specfiic line where the
function is imported, we don't know that =cos= necessarily belongs to
Numpy as we could also have defined such a function in the notebook.

<<ba26add4-d1dd-4123-90da-38d0b8d61409>>
** Sub-modules
   :PROPERTIES:
   :CUSTOM_ID: sub-modules
   :END:
In larger packages like Numpy, some functions are directly accessible
from the main package (like =np.cos=) and others with more specialized
tasks are grouped together by topic or domain into submodules. For
example Numpy has a submodule dedicated to distributions called
=random=. All the points seen above are still valide here.

We use the dot notation to access functions, but now need to also
specify the submodule name. For example the =normal= function that
generates numbers drawn from a normal distribution:

<<108d12fd-041a-4f48-9f92-58479d5eb9cd>>
#+begin_src python
np.random.normal()
#+end_src

#+begin_example
1.8077301364791438
#+end_example

<<ff382ef6-de48-49b7-968b-7120fb505367>>
We can shorten the function call by importing only the sub-module:

<<e60dc664-f66a-475c-86d5-44cdc8448826>>
#+begin_src python
from numpy import random
#+end_src

<<8c8470b2-882f-4cda-8c1f-795c22db05ab>>
#+begin_src python
random.normal()
#+end_src

#+begin_example
0.0909924357071552
#+end_example

<<f7e64bd9-1127-43cb-96db-60a12a56ea48>>
and we can further shorten by importing just the function:

<<eb009d0d-5b8f-49ab-8a5e-d16c972837b8>>
#+begin_src python
from numpy.random import normal
#+end_src

<<5533cd1d-1f0e-47d7-acb5-ad0ea6772019>>
#+begin_src python
normal()
#+end_src

#+begin_example
0.0038794083334154307
#+end_example

<<cc770a20-0014-4b6c-b12e-3fa6b1d72f22>>
** Exercise
   :PROPERTIES:
   :CUSTOM_ID: exercise
   :END:
The Numpy package has a linear algebra submodule called =linalg=. The
following code computes the norm of a vector: =np.linalg.norm([1,2])=.
Try to:

- import just the sub-module and call the same function
- import just the =norm= function and call it

<<72dc7b73-b072-411d-92f3-a7c9cce4395f>>
#+begin_src python
#+end_src
