* Loops
  :PROPERTIES:
  :CUSTOM_ID: loops
  :END:
If you want code to be executed repeatedly, you can make use of loops.

See also

- [[https://www.youtube.com/watch?v=4dN4Cn4u2M0][Python loops Tutorial]]
- [[https://www.w3schools.com/python/python_for_loops.asp][Python for
  loops]]

** For loops
   :PROPERTIES:
   :CUSTOM_ID: for-loops
   :END:
For looping over a range of numbers, we can use a simple =for= loop and
the [[https://www.w3schools.com/python/ref_func_range.asp][range]]
function.

In the following cell, the =print(i)= command will be executed a couple
of times for different values of =i=. We *i*terate over a range of
values:

#+begin_src python
for i in range(0, 5):
    print(i)
#+end_src

#+begin_example
0
1
2
3
4
#+end_example

Note that the above code that is indented will only be excuted for the
first given number (0) and continue until the last number (5) but not
including it.

You can also loop over a range of numbers with a defined step, for
example step 3:

#+begin_src python
for i in range(0, 10, 3):
    print(i)
#+end_src

#+begin_example
0
3
6
9
#+end_example

Iterating over arrays allows you to do something with all array
elements:

#+begin_src python
for animal in ["Dog", "Cat", "Mouse"]:
    print(animal)
#+end_src

#+begin_example
Dog
Cat
Mouse
#+end_example

You can iterate over two arrays in parallel, pair-wise like this:

#+begin_src python
# going through arrays pair-wise
measurement_1 = [1, 9, 7, 1, 2, 8, 9, 2, 1, 7, 8]
measurement_2 = [4, 5, 5, 7, 4, 5, 4, 6, 6, 5, 4]

for m_1, m_2 in zip(measurement_1, measurement_2):
    print("Paired measurements: " + str(m_1) + " and " + str(m_2))
#+end_src

#+begin_example
Paired measurements: 1 and 4
Paired measurements: 9 and 5
Paired measurements: 7 and 5
Paired measurements: 1 and 7
Paired measurements: 2 and 4
Paired measurements: 8 and 5
Paired measurements: 9 and 4
Paired measurements: 2 and 6
Paired measurements: 1 and 6
Paired measurements: 7 and 5
Paired measurements: 8 and 4
#+end_example

If you want to know the index of the element in the list as well, use
the [[https://realpython.com/python-enumerate/][enumerate]] function:

#+begin_src python
# numbering and iterating through collections
for index, animal in enumerate(["Dog", "Cat", "Mouse"]):
    print("The animal number " + str(index) + " in the list is " + animal)
#+end_src

#+begin_example
The animal number 0 in the list is Dog
The animal number 1 in the list is Cat
The animal number 2 in the list is Mouse
#+end_example

** Generating lists in loops
   :PROPERTIES:
   :CUSTOM_ID: generating-lists-in-loops
   :END:
One can generate lists using for loops. The conventional way of doing
this involves multiple lines of code:

#+begin_src python
# we start with an empty list
numbers = []

# and add elements
for i in range(0, 5):
    numbers.append(i * 2)
    
print(numbers)
#+end_src

#+begin_example
[0, 2, 4, 6, 8]
#+end_example

One can also write that shorter. The underlying concept is called
[[https://wiki.python.org/moin/Generators][generators]].

#+begin_src python
numbers = [i * 2 for i in range(0, 5)]

print(numbers)
#+end_src

#+begin_example
[0, 2, 4, 6, 8]
#+end_example

The conventional combination involving an if-statements looks like this:

#+begin_src python
# we start with an empty list
numbers = []

# and add elements
for i in range(0, 5):
    # check if the number is odd
    if i % 2:
        numbers.append(i * 2)
    
print(numbers)
#+end_src

#+begin_example
[2, 6]
#+end_example

And the short version like this:

#+begin_src python
numbers = [i * 2 for i in range(0, 5) if i % 2]

print(numbers)
#+end_src

#+begin_example
[2, 6]
#+end_example

** While loops
   :PROPERTIES:
   :CUSTOM_ID: while-loops
   :END:
Another way of looping is using the =while= loop. It works by checking a
condition, similar to the =if= statement. It will interrupt execution as
soon as the condition is no longer true:

#+begin_src python
number = 1024

while (number > 1):
    number = number / 2
    print(number)
#+end_src

#+begin_example
512.0
256.0
128.0
64.0
32.0
16.0
8.0
4.0
2.0
1.0
#+end_example

** Interrupting loops
   :PROPERTIES:
   :CUSTOM_ID: interrupting-loops
   :END:
You can interrupt loops at specific points in your code using the
=break= command:

#+begin_src python
number = 1024

while (True):
    number = number / 2
    print(number)
    
    if number < 1:
        break;
#+end_src

#+begin_example
512.0
256.0
128.0
64.0
32.0
16.0
8.0
4.0
2.0
1.0
0.5
#+end_example

#+begin_src python
for i in range(10):
    print(i)
    if i > 5:
        break
#+end_src

#+begin_example
0
1
2
3
4
5
6
#+end_example

** Skipping iterations in loops
   :PROPERTIES:
   :CUSTOM_ID: skipping-iterations-in-loops
   :END:
If you want to skip iterations, you can use the =continue= statement.
That often makes sense in combination with an =if=:

#+begin_src python
for i in range(0, 10):
    if i >= 3 and i <= 6:
        continue
    print(i)
#+end_src

#+begin_example
0
1
2
7
8
9
#+end_example

** Exercise 1
   :PROPERTIES:
   :CUSTOM_ID: exercise-1
   :END:
Assume you have a list of filenames and you want to do something with
them, for example print them out. Program a for loop which prints out
all file names which end with "tif".

#+begin_src python
file_names = ['dataset1.tif', 'dataset2.tif', 'summary.csv', 'readme.md', 'blobs.tif']
#+end_src

#+begin_src python
#+end_src

** Exercise 2
   :PROPERTIES:
   :CUSTOM_ID: exercise-2
   :END:
Assume you have a list of circle radii. Make a table (dictionary) with
two columns: radius and area.

#+begin_src python
radii = [3, 15, 67, 33, 12, 8, 12, 9, 22]
#+end_src

#+begin_src python
#+end_src
