* Functions
  :PROPERTIES:
  :CUSTOM_ID: functions
  :END:
We have used functions is past lessons. Functions have a name and
parameters. Some of them return a result, others don't. We typically
call them using =result = name(parameters)=.

See also

- [[https://www.tutorialspoint.com/python/python_functions.htm][Python
  functions]]
- [[https://docs.python.org/3/library/functions.html][List of built-in
  functions]]

Let's take a look at some functions, for example =print(text)= and
=pow(x, y)=. The print function takes a parameter (or multiple
parameters) and returns nothing:

#+begin_src python
result = print('Hello world')
#+end_src

#+begin_example
Hello world
#+end_example

#+begin_src python
result
#+end_src

The [[https://docs.python.org/3/library/functions.html#pow][pow]]
function has two parameters and returns a result:

#+begin_src python
result = pow(2, 3)
#+end_src

#+begin_src python
result
#+end_src

#+begin_example
8
#+end_example

** Custom functions
   :PROPERTIES:
   :CUSTOM_ID: custom-functions
   :END:
You can DEFine your own functions using the =def= statement. After the
def statement, you should specify your functions' name and in brackets
its parameters. Afterwards follows a colon =:= and all following lines
of code which are indented are part of this function. A final =return=
statement sends the result back to from where the function was called.

#+begin_src python
def sum_numbers(a, b):
    
    result = a + b
    
    return result
#+end_src

You can then call your function as often as you like

#+begin_src python
sum_numbers(3, 4)
#+end_src

#+begin_example
7
#+end_example

#+begin_src python
sum_numbers(5, 6)
#+end_src

#+begin_example
11
#+end_example

Sometimes, you want to save the result of your function in a variable.

#+begin_src python
c = sum_numbers(4, 5)
print(c)
#+end_src

#+begin_example
9
#+end_example

** Simplify code using functions
   :PROPERTIES:
   :CUSTOM_ID: simplify-code-using-functions
   :END:
Assume you have a complicated algorithm which can tell you if a number
if odd or even. Let's put this algorithm in a function and call it later
on. For our algorithm, we will use the
[[https://en.wikipedia.org/wiki/Modulo_operation][modulo operator %]].

#+begin_src python
def print_odd_or_even(number):
    if number % 2 == 0:
        print(number, "is even")
    else:
        print(number, "is odd")
#+end_src

#+begin_src python
print_odd_or_even(3)
#+end_src

#+begin_example
3 is odd
#+end_example

#+begin_src python
print_odd_or_even(4)
#+end_src

#+begin_example
4 is even
#+end_example

#+begin_src python
print_odd_or_even(10)
#+end_src

#+begin_example
10 is even
#+end_example

Thus, instead of writing the same =if-else= block again and again, we
can just call our custom =print_odd_or_even= function.

** Documenting functions
   :PROPERTIES:
   :CUSTOM_ID: documenting-functions
   :END:
You can document what a function does in its so called doc string. The
doc string follows right after the functions header and looks like this:

#+begin_src python
def square(number):
    '''
    Squares a number by multiplying it with itself and returns its result.
    '''

    return number * number
#+end_src

You can then later read the documentation of the function like this:

#+begin_src python
print(square.__doc__)
#+end_src

#+begin_example
    Squares a number by multiplying it with itself  and returns its result.
    
#+end_example

Also try this if you want to have the docstring shown side-by-side in
your notebook:

#+begin_src python
square?
#+end_src

#+begin_example
Signature: square(number)
Docstring: Squares a number by multiplying it with itself  and returns its result.
File:      /var/folders/p1/6svzckgd1y5906pfgm71fvmr0000gn/T/ipykernel_11914/1507435947.py
Type:      function
#+end_example

By the way, you can do this with any function:

#+begin_src python
import math
print(math.sqrt.__doc__)
#+end_src

#+begin_example
Return the square root of x.
#+end_example

#+begin_src python
print(math.exp.__doc__)
#+end_src

#+begin_example
Return e raised to the power of x.
#+end_example

** Exercise
   :PROPERTIES:
   :CUSTOM_ID: exercise
   :END:
Write a function that takes two parameters: =number_of_points_in_exam=
and =number_of_total_points_in_exam= and returns a grade from 1 to 5.
Students with > 95% of the points get grade 1, above 80% they get grade
2, above 60% grade 3 and above 50% grade 4. Students with less than 50%
get grade 5 and have to repeat the exam. Then, call the function for
three students who had 15, 25 and 29 points in an exam with 30 total
points.

#+begin_src python
#+end_src
