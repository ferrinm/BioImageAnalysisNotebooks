<<directed-compensation>>
* Custom libraries
  :PROPERTIES:
  :CUSTOM_ID: custom-libraries
  :END:
When programming python for some time, you may be using again and again
the same code. You could copy&paste it from jupyter notebook to jupyter
notebook. However, notebooks are not meant to hold many functions.
Notebooks are meant to show short and concise examples of code. Thus, in
order to organize our code, we can put functions we use more often into
a python file, a custom library, and then import the functions.

See also:

- [[https://docs.python.org/3/reference/import.html][The import system]]

Within the same folder, there exists a [[file:my_library.py]] file. It
contains two functions. Let's import them and use them:

<<collaborative-leisure>>
#+begin_src python
from my_library import square
#+end_src

<<compressed-chassis>>
#+begin_src python
square(5)
#+end_src

#+begin_example
25
#+end_example

<<coastal-franklin>>
#+begin_src python
from my_library import *
#+end_src

<<defensive-small>>
#+begin_src python
wuzzle(5)
#+end_src

#+begin_example
2.449489742783178
#+end_example

<<aggregate-invalid>>
When maintaining your own library of functions, make sure that the
functions have reasonable names and useful docstrings. You may otherwise
be confused about your own code later on.

This is a good example:

<<catholic-afternoon>>
#+begin_src python
print(square.__doc__)
#+end_src

#+begin_example
    Squares a number by multiplying it with itself  and returns its result.
    
#+end_example

<<textile-cricket>>
This is a bad example:

<<lesbian-candy>>
#+begin_src python
print(wuzzle.__doc__)
#+end_src

#+begin_example
    The wuzzle function manipulates a number in a magic way and returns the result.
    
#+end_example

<<approved-violence>>
** Modifying code in custom libraries
   :PROPERTIES:
   :CUSTOM_ID: modifying-code-in-custom-libraries
   :END:
If you modify code in a python library file side-by-side with the code
in a notebook, you may have restart your notebook after modifying the
library file. You can do this in the menu =Kernel > Restart & Run All=.

<<liable-press>>
* Exercise
  :PROPERTIES:
  :CUSTOM_ID: exercise
  :END:
Create an own library and write a function that can compute the
[[https://en.wikipedia.org/wiki/Euclidean_distance][Euclidean distance]]
between two points. The point coordinates are given as tuples. Hint: You
will need a for-loop in this function that iterates pair-wise over the
two coordinates:

<<worse-reggae>>
#+begin_src python
p = (1.5, 6.4, 7.3)
q = (3.4, 1.0, 0.9)
#+end_src

<<confident-incidence>>
#+begin_src python
#+end_src
